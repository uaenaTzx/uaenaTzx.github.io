<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://uaenaTzx.github.io</id>
    <title>Uaena_blog</title>
    <updated>2022-09-07T02:12:57.780Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://uaenaTzx.github.io"/>
    <link rel="self" href="https://uaenaTzx.github.io/atom.xml"/>
    <subtitle>菜狗tzx的笔记博客🐕</subtitle>
    <logo>https://uaenaTzx.github.io/images/avatar.png</logo>
    <icon>https://uaenaTzx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Uaena_blog</rights>
    <entry>
        <title type="html"><![CDATA[MDN JS学习笔记(基础2)]]></title>
        <id>https://uaenaTzx.github.io/post/mdn-js-xue-xi-bi-ji-er/</id>
        <link href="https://uaenaTzx.github.io/post/mdn-js-xue-xi-bi-ji-er/">
        </link>
        <updated>2022-09-01T09:07:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-前言">一、前言</h1>
<p>本章继上一篇的基础1进行，继续坚持！👊</p>
<h1 id="二-表达式与运算符">二、表达式与运算符</h1>
<p>本章描述了 JavaScript 的表达式和运算符，包括了赋值，比较，算数，位运算，逻辑，字符串，三元等等。</p>
<h2 id="1运算符">1.运算符</h2>
<p>JavaScript 拥有二元和一元运算符， 和一个特殊的三元运算符（条件运算符）。<br>
一个二元运算符需要两个操作数，分别在运算符的前面和后面：</p>
<pre><code>操作数 1 运算符 操作数 2
//例如，3+4 或 x*y。
</code></pre>
<p>一个一元运算符需要一个操作数，在运算符前面或后面：</p>
<pre><code>运算符 操作数
操作数 运算符
//例如，x++ 或 ++x。
</code></pre>
<h3 id="11赋值运算符">1.1赋值运算符</h3>
<p>一个 赋值运算符 (assignment operator) (en-US) 将它右边操作数的值赋给它左边的操作数。最简单的赋值运算符是等于（=）。还有些更复杂的如（+=、&gt;&gt;= ……）</p>
<h4 id="解构">解构</h4>
<p>对于更复杂的赋值，解构赋值语法是一个能从数组或对象对应的数组结构或对象字面量里提取数据的 Javascript 表达式。</p>
<pre><code>var foo = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];

// 不使用解构
var one   = foo[0];
var two   = foo[1];
var three = foo[2];

// 使用解构
var [one, two, three] = foo;
</code></pre>
<h3 id="12比较运算符">1.2比较运算符</h3>
<p>比较运算符比较它的操作数并返回一个基于表达式是否为真的逻辑值。操作数可以是数字，字符串，逻辑，对象值。字符串比较是基于标准的字典顺序，使用 Unicode 值。在多数情况下，如果两个操作数不是相同的类型， JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。类型转换的例外是使用 === 和 !== 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。</p>
<h3 id="13算术运算符">1.3.算术运算符</h3>
<p>算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除 (+ - * /)。当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生Infinity——<font color="red">无穷大数</font>）。<br>
注：指数运算符——**</p>
<h3 id="14位运算符">1.4位运算符</h3>
<p>位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制八进制或十六进制数。例如：十进制数字 9 用二进制表示为 1001，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 JavaScript 数值。<br>
下表总结了 JavaScript 的位运算符:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Operator</th>
<th style="text-align:left">Usage</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">与</td>
<td style="text-align:left">a &amp; b</td>
<td style="text-align:left">在 a,b 的位表示中，每一个对应的位都为 1 则返回 1， 否则返回 0</td>
</tr>
<tr>
<td style="text-align:left">或</td>
<td style="text-align:left">a  | b</td>
<td style="text-align:left">在 a,b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1， 否则返回 0</td>
</tr>
<tr>
<td style="text-align:left">异或</td>
<td style="text-align:left">a ^ b</td>
<td style="text-align:left">在 a,b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0.</td>
</tr>
<tr>
<td style="text-align:left">非</td>
<td style="text-align:left">~ a</td>
<td style="text-align:left">反转被操作数的位</td>
</tr>
<tr>
<td style="text-align:left">左移</td>
<td style="text-align:left">a &lt;&lt; b</td>
<td style="text-align:left">将 a 的二进制串向左移动 b 位，右边移入 0.</td>
</tr>
<tr>
<td style="text-align:left">右移</td>
<td style="text-align:left">a &gt;&gt; b</td>
<td style="text-align:left">把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位。(算术右移左边空出的位是根据最高位是 0 和 1 来进行填充的)</td>
</tr>
<tr>
<td style="text-align:left">无符号右移</td>
<td style="text-align:left">a &gt;&gt;&gt; b</td>
<td style="text-align:left">把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</td>
</tr>
</tbody>
</table>
<p>其中，前四者属于<font color="red">位逻辑运算符</font>,后三者属于<font color="red">移位运算符</font></p>
<h3 id="15逻辑运算符">1.5.逻辑运算符</h3>
<p>①逻辑与 &amp;&amp;<br>
②逻辑或 ||<br>
③逻辑非 ！</p>
<h4 id="短路求值">短路求值</h4>
<p>作为逻辑表达式进行求值是从左到右</p>
<p>false &amp;&amp; anything // 被短路求值为 false<br>
true || anything // 被短路求值为 true<br>
上述表达式的anything部分不会被求值，所以这样做不会产生任何副作用。</p>
<h3 id="16字符串运算符">1.6字符串运算符</h3>
<p>除了比较操作符，它可以在字符串值中使用，连接操作符（+）连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。</p>
<pre><code>console.log(&quot;my &quot; + &quot;string&quot;); // &quot;my string&quot;.

var myString = &quot;alpha&quot;;
myString += &quot;bet&quot;; // 返回 &quot;alphabet&quot;
</code></pre>
<h3 id="17条件三元运算符">1.7条件（三元）运算符</h3>
<p>条件运算符是 JavaScript 中唯一需要三个操作数的运算符。运算的结果根据给定条件在两个值中取其一。</p>
<pre><code>条件 ? 值 1 : 值 2

var status = (age &gt;= 18) ? &quot;adult&quot; : &quot;minor&quot;;
</code></pre>
<p>如果条件为真，则结果取值 1。否则为值 2。你能够在任何允许使用标准运算符的地方使用条件运算符。</p>
<h3 id="18逗号操作符">1.8逗号操作符</h3>
<p>逗号操作符（,）对两个操作数进行求值并返回最终操作数的值。它常常用在 for 循环中，在每次循环时对多个变量进行更新。</p>
<pre><code>//输出二维数组的对角线元素
var x = [0,1,2,3,4,5,6,7,8,9]
var a = [x, x, x, x, x];

for (var i = 0, j = 9; i &lt;= j; i++, j--)
  console.log('a[' + i + '][' + j + ']= ' + a[i][j]);
</code></pre>
<h3 id="19一元操作符">1.9一元操作符</h3>
<p>一元操作符仅对应一个操作数。</p>
<h4 id="delete">delete</h4>
<p>delete操作符，删除一个对象的属性或者一个数组中某一个键值。语法如下：</p>
<pre><code>delete objectName.property;
delete objectName[index];
delete property;
</code></pre>
<p>objectName是一个对象名，property 是一个已经存在的属性，index是数组中的一个已经存在的键值的索引值。</p>
<p>第三行的形式只在with声明的状态下是合法的， 从对象中删除一个属性。</p>
<p>你能使用 delete 删除各种各样的隐式声明， <font color="red">但是被var声明的除外</font>。</p>
<p>如果 delete 操作成功，属性或者元素会变成 undefined。如果 delete可行会返回true，如果不成功返回false。</p>
<pre><code>x = 42;
var y = 43;
myobj = new Number();
myobj.h = 4;    // create property h
delete x;       // returns true (can delete if declared implicitly)
delete y;       // returns false (cannot delete if declared with var)
delete Math.PI; // returns false (cannot delete predefined properties)
delete myobj.h; // returns true (can delete user-defined properties)
delete myobj;   // returns true (can delete if declared implicitly)
</code></pre>
<p>注：删除数组中的元素时，数组的长度是不变的，例如删除a[3], a[4]，a[4]和 a[3] 仍然存在，只是变成了undefined。</p>
<h4 id="typeof">typeof</h4>
<p>typeof 操作符 可通过下面 2 种方式使用：</p>
<pre><code>typeof operand
typeof (operand)
</code></pre>
<p>typeof 操作符返回一个表示 operand 类型的字符串值。operand 可为字符串、变量、关键词或对象，其类型将被返回。operand 两侧的括号为可选。</p>
<p>假设你定义了如下的变量：</p>
<pre><code>var myFun = new Function(&quot;5 + 2&quot;);
var shape = &quot;round&quot;;
var size = 1;
var today = new Date();
</code></pre>
<p>typeof 操作符将会返回如下的结果：</p>
<pre><code>typeof myFun;     // returns &quot;function&quot;
typeof shape;     // returns &quot;string&quot;
typeof size;      // returns &quot;number&quot;
typeof today;     // returns &quot;object&quot;
typeof dontExist; // returns &quot;undefined&quot;

//额外的
typeof true; // returns &quot;boolean&quot;
typeof null; // returns &quot;object&quot;
</code></pre>
<p>对于预定义的对象，typeof 操作符将会返回如下结果：</p>
<pre><code>typeof Date;     // returns &quot;function&quot;
typeof Function; // returns &quot;function&quot;
typeof Math;     // returns &quot;object&quot;
typeof Option;   // returns &quot;function&quot;
typeof String;   // returns &quot;function&quot;
</code></pre>
<h4 id="void">void</h4>
<p>void 运算符运用方法如下：</p>
<pre><code>void (expression)
void expression
</code></pre>
<p>void 运算符，表明一个运算没有返回值。expression 是 javaScript 表达式，括号中的表达式是一个可选项，当然使用该方式是一种好的形式。</p>
<p>你可以使用 void 运算符指明一个超文本链接。该表达式是有效的，但是并不会在当前文档中进行加载。</p>
<p>如下创建了一个超链接文本，当用户单击该文本时，不会有任何效果。</p>
<pre><code>&lt;a href=&quot;javascript:void(0)&quot;&gt;Click here to do nothing&lt;/a&gt;
</code></pre>
<p>下面的代码创建了一个超链接，当用户单击它时，提交一个表单。</p>
<pre><code>&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;
Click here to submit&lt;/a&gt;
</code></pre>
<h3 id="110关系运算符">1.10关系运算符</h3>
<p>关系运算符对操作数进行比较，根据比较结果真或假，返回相应的布尔值。</p>
<h4 id="in">in</h4>
<p>in操作符，如果所指定的属性确实存在于所指定的对象中，则会返回true，语法如下：</p>
<pre><code>propNameOrNumber in objectName
</code></pre>
<p>在这里 propNameOrNumber可以是一个代表着属性名的字符串或者是一个代表着<font color = "red">数组索引</font>的数值表达式，而objectName则是一个对象名。</p>
<p>下面的例子是 in 操作的常见用法。</p>
<pre><code>// Arrays
var trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);
0 in trees;        // returns true
3 in trees;        // returns true
6 in trees;        // returns false
&quot;bay&quot; in trees;    // returns false (you must specify the index number,
                   // not the value at that index)
&quot;length&quot; in trees; // returns true (length is an Array property)

// Predefined objects
&quot;PI&quot; in Math;          // returns true
var myString = new String(&quot;coral&quot;);
&quot;length&quot; in myString;  // returns true

// Custom objects
var mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};
&quot;make&quot; in mycar;  // returns true
&quot;model&quot; in mycar; // returns true
</code></pre>
<h4 id="instanceof">instanceof</h4>
<p>如果所判别的对象确实是所指定的类型，则返回true。其语法如下：</p>
<pre><code>objectName instanceof objectType
</code></pre>
<p>objectName 是需要做判别的对象的名称，而objectType是假定的对象的类型，例如Date或 Array。</p>
<p>当你需要确认一个对象在运行时的类型时，可使用instanceof. 例如，需要 catch 异常时，你可以针对抛出异常的类型，来做不同的异常处理。</p>
<p>例如，下面的代码使用instanceof去判断 theDay是否是一个 Date 对象。因为 theDay是一个Date对象，所以 if中的代码会执行。</p>
<pre><code>var theDay = new Date(1995, 12, 17);
if (theDay instanceof Date) {
  // statements to execute
}
</code></pre>
<h3 id="111运算符优先级">1.11运算符优先级</h3>
<p>运算符的优先级，用于确定一个表达式的计算顺序。在你不能确定优先级时，可以通过使用括号显式声明运算符的优先级。</p>
<p>下表列出了描述符的优先级，从最高到最低。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Operator type</th>
<th style="text-align:left">Individual operators</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">member</td>
<td style="text-align:left">. []</td>
</tr>
<tr>
<td style="text-align:left">call / create instance</td>
<td style="text-align:left">() new</td>
</tr>
<tr>
<td style="text-align:left">negation/increment</td>
<td style="text-align:left">! ~ - + ++ -- typeof void delete</td>
</tr>
<tr>
<td style="text-align:left">multiply/divide</td>
<td style="text-align:left">* / %</td>
</tr>
<tr>
<td style="text-align:left">addition/subtraction</td>
<td style="text-align:left">+ -</td>
</tr>
<tr>
<td style="text-align:left">bitwise shift</td>
<td style="text-align:left">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
</tr>
<tr>
<td style="text-align:left">relational</td>
<td style="text-align:left">&lt; &lt;= &gt; &gt;= in instanceof</td>
</tr>
<tr>
<td style="text-align:left">equality</td>
<td style="text-align:left">== != === !==</td>
</tr>
<tr>
<td style="text-align:left">bitwise-and</td>
<td style="text-align:left">&amp;</td>
</tr>
<tr>
<td style="text-align:left">bitwise-xor</td>
<td style="text-align:left">^</td>
</tr>
<tr>
<td style="text-align:left">bitwise-or</td>
<td style="text-align:left">\</td>
</tr>
<tr>
<td style="text-align:left">logical-and</td>
<td style="text-align:left">&amp;&amp;</td>
</tr>
<tr>
<td style="text-align:left">logical-or</td>
<td style="text-align:left">|\</td>
</tr>
<tr>
<td style="text-align:left">conditional</td>
<td style="text-align:left">?:</td>
</tr>
<tr>
<td style="text-align:left">assignment</td>
<td style="text-align:left">= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^=</td>
</tr>
<tr>
<td style="text-align:left">comma</td>
<td style="text-align:left">,</td>
</tr>
</tbody>
</table>
<h2 id="2表达式">2.表达式</h2>
<p>表达式是一组代码的集合，它返回一个值。</p>
<p>每一个合法的表达式都能计算成某个值，但从概念上讲，有两种类型的表达式：有副作用的（比如赋值）和单纯计算求值的。</p>
<p>JavaScript 有以下表达式类型：<br>
①算数：得出一个数字，例如 3.14159。（通常使用算数运算符）<br>
②字符串：得出一个字符串，例如，&quot;Fred&quot; 或 &quot;234&quot;。（通常使用字符串运算符。）<br>
③逻辑值：得出 true 或者 false。（经常涉及到逻辑运算符。）<br>
④基本表达式: javascript 中基本的关键字和一般表达式。<br>
⑤左值表达式：分配给左值。</p>
<h3 id="21基本表达式">2.1基本表达式</h3>
<h4 id="this">this</h4>
<p>this关键字被用于指代当前的对象，通常，this指代的是方法中正在被调用的对象。用法如下：</p>
<pre><code>this[&quot;propertyName&quot;]
this.propertyName
</code></pre>
<p>假设一个用于验证对象value属性的validate函数，传参有对象，最高值和最低值。</p>
<pre><code>假设一个用于验证对象value属性的validate函数，传参有对象，最高值和最低值。
</code></pre>
<p>你可以在任何表单元素的onchange事件处理中调用validat函数，用this来指代当前的表单元素，用例如下：</p>
<pre><code>&lt;p&gt;Enter a number between 18 and 99:&lt;/p&gt;
&lt;input type=&quot;text&quot; name=&quot;age&quot; size=3 onChange=&quot;validate(this, 18, 99);&quot;&gt;
</code></pre>
<h4 id="分组操作符">分组操作符</h4>
<p>分组操作符（）控制了表达式中计算的优先级。举例来说，你可以改变先乘除后加减的顺序，转而先计算加法。</p>
<h4 id="数值推导">数值推导</h4>
<p>Comprehensions 是一个带有实验性质的 JavaScript 特性，计划将在未来的 ECMAScript 版本中加入该特性。有两种类型的 comprehensions:<br>
①[for (x of y) x] 数列数值推导（非标准用法）</p>
<p>②(for (x of y) y)生成器数值推导</p>
<p>Comprehensions 特性被许多编程语言所采用，该特性能够使你快速地通过一个已有的数组来创建出一个新的数组，比如：</p>
<pre><code>[for (i of [ 1, 2, 3 ]) i*i ];
// [ 1, 4, 9 ]

var abc = [ &quot;A&quot;, &quot;B&quot;, &quot;C&quot; ];
[for (letters of abc) letters.toLowerCase()];
// [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]
</code></pre>
<h3 id="22左值表达式">2.2左值表达式</h3>
<p>左值可以作为赋值的目标。</p>
<h4 id="new">new</h4>
<p>你可以使用new operator 创建一个自定义类型或者是预置类型的对象实例。用法如下：</p>
<pre><code>var objectName = new objectType([param1, param2, ..., paramN]);
</code></pre>
<h4 id="super">super</h4>
<p>super 关键字可以用来调用一个对象父类的函数，它在用来调用一个类的父类的构造函数时非常有用，比如：</p>
<pre><code>super([arguments]); // calls the parent constructor. super.functionOnParent([arguments]);
</code></pre>
<h4 id="扩展语句">扩展语句</h4>
<p>扩展语句符允许一个表达式在原地展开， 当需要多个参数 (比如函数调用时) 或者多个值 (比如字面量数组) 。</p>
<p>例如：现在你有一个数组，你想创建一个新数组，并将刚才那个作为它的一部分，用 array 的字面语法是不够的，你不得不写一些代码实现它，比如用些push, splice, concat 等等。但是用扩展语句 就没问题了：</p>
<pre><code>var parts = ['shoulder', 'knees'];
var lyrics = ['head', ...parts, 'and', 'toes'];
</code></pre>
<p>类似的，扩展语句也可以用在函数调用的时候：</p>
<pre><code>function f(x, y, z) { }
var args = [0, 1, 2];
f(...args);
</code></pre>
<h1 id="三-数字和日期">三、数字和日期</h1>
<p>本章节介绍了在 JavaScript 中使用数字和日期来处理和执行计算的概念，对象和函数。</p>
<h2 id="1数字">1.数字</h2>
<p>在 JavaScript 里面，数字均为双精度浮点类型，即一个介于 ±2^−1023 和 ±2^+1024 之间的数字，或约为 ±10^−308 到 ±10^+308，数字精度为 53 位。整数数值仅在 ±(2^53 - 1) 的范围内可以表示准确。</p>
<p>除了能够表示浮点数，数字类型也还能表示三种符号值：+Infinity（正无穷）、-Infinity（负无穷）和 NaN (非数字)。</p>
<p>JavaScript 最近添加了 BigInt 的支持，能够用于表示极大的数字。使用 BigInt 的时候有一些注意事项，例如，你不能让 BigInt 和 Number 直接进行运算，你也不能用 Math 对象去操作 BigInt 数字。</p>
<p>可以使用四种数字进制：十进制，二进制，八进制和十六进制。（具体不再详细介绍）<br>
指数形式：</p>
<pre><code>1E3   // 1000
2e6   // 2000000
0.1e2 // 10
</code></pre>
<h2 id="2数字对象">2.数字对象</h2>
<p>内置的Number对象有一些有关数字的常量属性，如最大值、不是一个数字和无穷大的。你不能改变这些属性，但可以按下边的方式使用它们：</p>
<pre><code>var biggestNum = Number.MAX_VALUE;
var smallestNum = Number.MIN_VALUE;
var infiniteNum = Number.POSITIVE_INFINITY;
var negInfiniteNum = Number.NEGATIVE_INFINITY;
var notANum = Number.NaN;
</code></pre>
<p>注：你永远只用从 Number 对象引用上边显示的属性，而不是你自己创建的 Number 对象的属性。</p>
<h3 id="21数字的属性">2.1数字的属性</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Number.MAX_VALUE</td>
<td style="text-align:left">可表示的最大值</td>
</tr>
<tr>
<td style="text-align:left">Number.MIN_VALUE</td>
<td style="text-align:left">可表示的最小值</td>
</tr>
<tr>
<td style="text-align:left">Number.NaN</td>
<td style="text-align:left">特指”非数字“</td>
</tr>
<tr>
<td style="text-align:left">Number.NEGATIVE_INFINITY</td>
<td style="text-align:left">特指“负无穷”;在溢出时返回</td>
</tr>
<tr>
<td style="text-align:left">Number.POSITIVE_INFINITY</td>
<td style="text-align:left">特指“正无穷”;在溢出时返回</td>
</tr>
<tr>
<td style="text-align:left">Number.EPSILON</td>
<td style="text-align:left">表示 1 和比最接近 1 且大于 1 的最小Number之间的差别</td>
</tr>
<tr>
<td style="text-align:left">Number.MIN_SAFE_INTEGER</td>
<td style="text-align:left">JavaScript 最小安全整数。</td>
</tr>
<tr>
<td style="text-align:left">Number.MAX_SAFE_INTEGER</td>
<td style="text-align:left">JavaScript 最大安全整数。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Number.parseFloat()</td>
<td style="text-align:left">把字符串参数解析成浮点数， 和全局方法 parseFloat() 作用一致。</td>
</tr>
<tr>
<td style="text-align:left">Number.parseInt()</td>
<td style="text-align:left">把字符串解析成特定基数对应的整型数字，和全局方法 parseInt() 作用一致。</td>
</tr>
<tr>
<td style="text-align:left">Number.isFinite()</td>
<td style="text-align:left">判断传递的值是否为有限数字。</td>
</tr>
<tr>
<td style="text-align:left">Number.isInteger()</td>
<td style="text-align:left">判断传递的值是否为整数。</td>
</tr>
<tr>
<td style="text-align:left">Number.isNaN()</td>
<td style="text-align:left">判断传递的值是否为 NaN. More robust version of the original</td>
</tr>
<tr>
<td style="text-align:left">Number.isSafeInteger()</td>
<td style="text-align:left">判断传递的值是否为安全整数。</td>
</tr>
</tbody>
</table>
<p>数字的类型提供了不同格式的方法以从数字对象中检索信息。以下表格总结了 数字类型原型上的方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">toExponential()</td>
<td style="text-align:left">返回一个数字的指数形式的字符串，形如：1.23e+2</td>
</tr>
<tr>
<td style="text-align:left">toFixed()</td>
<td style="text-align:left">返回指定小数位数的表示形式，var a=123,b=a.toFixed(2)//b=&quot;123.00&quot;</td>
</tr>
<tr>
<td style="text-align:left">toPrecision()</td>
<td style="text-align:left">返回一个指定精度的数字。如下例子中，a=123 中，3 会由于精度限制消失 var a=123,b=a.toPrecision(2)//b=&quot;1.2e+2&quot;</td>
</tr>
</tbody>
</table>
<h2 id="3数字对象math">3.数字对象（Math）</h2>
<p>对于内置的Math数学常项和函数也有一些属性和方法。 比方说， Math 对象的 PI 属性会有属性值 pi (3.141...)，你可以像这样调用它：</p>
<pre><code>Math.PI // π
</code></pre>
<p>同理，标准数学函数也是 Math 的方法。 这些包括三角函数 ​​，对数，指数，和其他函数。比方说你想使用三角函数 sin， 你可以这么写：</p>
<pre><code>Math.sin(1.56)
</code></pre>
<p>需要注意的是 Math 的所有三角函数参数都是弧度制。</p>
<p>下面的表格总结了 Math 对象的方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">abs()</td>
<td style="text-align:left">绝对值</td>
</tr>
<tr>
<td style="text-align:left">sin(), cos(), tan()</td>
<td style="text-align:left">标准三角函数;参数为弧度</td>
</tr>
<tr>
<td style="text-align:left">asin(), acos(), atan(), atan2()</td>
<td style="text-align:left">反三角函数; 返回值为弧度</td>
</tr>
<tr>
<td style="text-align:left">sinh(), cosh(), tanh()</td>
<td style="text-align:left">双曲三角函数; 参数为弧度。</td>
</tr>
<tr>
<td style="text-align:left">asinh(), acosh(), atanh()</td>
<td style="text-align:left">反双曲三角函数;返回值为弧度。</td>
</tr>
<tr>
<td style="text-align:left">pow(), exp(), expm1(), log10(), log1p(), log2()</td>
<td style="text-align:left">指数与对数函数</td>
</tr>
<tr>
<td style="text-align:left">floor(), ceil()</td>
<td style="text-align:left">返回小于等于参数的最大整数；返回大于等于参数的最小整数</td>
</tr>
<tr>
<td style="text-align:left">min(), max()</td>
<td style="text-align:left">返回一个以逗号间隔的数字参数列表中的较小或较大值 (分别地)</td>
</tr>
<tr>
<td style="text-align:left">random()</td>
<td style="text-align:left">返回 0 和 1 之间的随机数。</td>
</tr>
<tr>
<td style="text-align:left">round(), fround(), trunc(),</td>
<td style="text-align:left">四舍五入和截断函数</td>
</tr>
<tr>
<td style="text-align:left">sqrt(), cbrt(), hypot()</td>
<td style="text-align:left">平方根，立方根，所有参数平方和的平方根两个参数平方和的平方根</td>
</tr>
<tr>
<td style="text-align:left">sign()</td>
<td style="text-align:left">数字的符号，说明数字是否为正、负、零。</td>
</tr>
<tr>
<td style="text-align:left">clz32(), imul()</td>
<td style="text-align:left">在 32 位 2 进制表示中，开头的 0 的数量。返回传入的两个参数相乘结果的类 C 的 32 位表现形式</td>
</tr>
</tbody>
</table>
<p>和其他对象不同，你不能够创建一个自己的 Math 对象。你只能使用内置的 Math 对象。</p>
<h2 id="4日期对象">4.日期对象</h2>
<p>JavaScript 没有日期数据类型。但是你可以在你的程序里使用 Date 对象和其方法来处理日期和时间。Date 对象有大量的设置、获取和操作日期的方法。 <font color="red">它并不含有任何属性</font>。<br>
与java相似，两种语言有许多一样的方法，也都是以以 1970 年 1 月 1 日 00:00:00 以来的毫秒数来储存数据类型的。（Date 对象的范围是相对距离 UTC 1970 年 1 月 1 日 的前后 100,000,000 天。）</p>
<p>创建一个日期对象：</p>
<pre><code>var dateObjectName = new Date([parameters]);
</code></pre>
<p>这里的 dateObjectName 对象是所创建的 Date 对象的一个名字，它可以成为一个新的对象或者已存在的其他对象的一个属性。</p>
<p>不使用 new 关键字来调用 Date 对象将返回当前时间和日期的字符串</p>
<p>前边的语法中的参数（parameters）可以是一下任何一种：<br>
①无参数 : 创建今天的日期和时间，例如： today = new Date();.<br>
②一个符合以下格式的表示日期的字符串: &quot;月 日，年 时：分:秒.&quot; 例如： var Xmas95 = new Date(&quot;December 25, 1995 13:30:00&quot;)。如果你省略时、分、秒，那么他们的值将被设置为 0。<br>
③一个年，月，日的整型值的集合，例如： var Xmas95 = new Date(1995, 11, 25)。<br>
④一个年，月，日，时，分，秒的集合，例如： var Xmas95 = new Date(1995, 11, 25, 9, 30, 0);.<br>
###4.1Date 对象的方法<br>
处理日期时间的 Date 对象方法可分为以下几类：<br>
①&quot;set&quot; 方法，用于设置 Date 对象的日期和时间的值。<br>
②&quot;get&quot; 方法，用于获取 Date 对象的日期和时间的值。<br>
③&quot;to&quot; 方法，用于返回 Date 对象的字符串格式的值。<br>
④parse 和 UTC 方法，用于解析 Date 字符串。</p>
<p>通过“get”和“set”方法，你可以分别设置和获取秒，分，时，日，星期，月份，年。这里有个 getDay 方法可以返回星期，但是没有相应的 setDay 方法用来设置星期，因为星期是自动设置的。</p>
<p>例如，假设你定义了如下日期：</p>
<pre><code>var Xmas95 = new Date(&quot;December 25, 1995&quot;);

Xmas95.getMonth()//11
Xmas95.getFullYear()//1995
</code></pre>
<p>getTime 和 setTime 方法对于比较日期是非常有用的。getTime方法返回从 1970 年 1 月 1 日 00:00:00 的毫秒数。这些方法用整数来代表以下这些值：<br>
秒，分： 0 至 59<br>
时： 0 至 23<br>
星期： 0 (周日) 至 6 (周六)<br>
日期：1 至 31<br>
<strong>月份： 0 (一月) to 11 (十二月)</strong><br>
年份： 从 1900 开始的年数</p>
<p>例如，以下代码展示了今年剩下的天数：</p>
<pre><code>var today = new Date();
var endYear = new Date(1995, 11, 31, 23, 59, 59, 999); // 设置日和月，注意，月份是 0-11
endYear.setFullYear(today.getFullYear()); // 把年设置为今年
var msPerDay = 24 * 60 * 60 * 1000; // 每天的毫秒数
var daysLeft = (endYear.getTime() - today.getTime()) / msPerDay;
var daysLeft = Math.round(daysLeft); //返回今年剩下的天数
</code></pre>
<h4 id="parse方法">parse方法</h4>
<p>prase方法用于分析一个包含日期的字符串，并返回毫秒数<br>
parse 方法对于从日期字符串赋值给现有的 Date 对象很有用，例如：以下代码使用parse和setTime分配了一个日期值给IPOdate对象：</p>
<pre><code>var IPOdate = new Date();
IPOdate.setTime(Date.parse(&quot;Aug 9, 1995&quot;));
</code></pre>
<p>在下边的例子中，JSClock() 函数返回了用数字时钟格式的时间：</p>
<pre><code>function JSClock() {
  var time = new Date();
  var hour = time.getHours();
  var minute = time.getMinutes();
  var second = time.getSeconds();
  var temp = &quot;&quot; + ((hour &gt; 12) ? hour - 12 : hour);
  if (hour == 0)
    temp = &quot;12&quot;;
  temp += ((minute &lt; 10) ? &quot;:0&quot; : &quot;:&quot;) + minute;
  temp += ((second &lt; 10) ? &quot;:0&quot; : &quot;:&quot;) + second;
  temp += (hour &gt;= 12) ? &quot; P.M.&quot; : &quot; A.M.&quot;;
  return temp;
}
</code></pre>
<h1 id="四-文本格式化">四、文本格式化</h1>
<p>本章介绍在 Javascript 中如何使用字符串与文本内容。</p>
<h2 id="1字符串">1.字符串</h2>
<p>JavaScript 中的 String 类型用于表示文本型的数据。它是由无符号整数值（16bit）作为元素而组成的集合。字符串中的每个元素在字符串中占据一个位置，第一个元素的 index 值是 0，下一个元素的 index 值是 1。你可以通过 String 字面值或者 String 对象两种方式创建一个字符串。</p>
<h3 id="11string字面量">1.1String字面量</h3>
<p>可以使用单引号或双引号创建简单的字符串：</p>
<pre><code>'foo'
&quot;bar&quot;
</code></pre>
<p>可以使用转义序列来创建更复杂的字符串：</p>
<h4 id="16-进制转义序列">16 进制转义序列</h4>
<p>\x 之后的数值将被认为是一个 16 进制数。</p>
<pre><code>'\xA9' // &quot;©&quot;
</code></pre>
<h4 id="unicode-转义序列">Unicode 转义序列</h4>
<p>Unicode 转义序列在\u 之后需要至少 4 个字符。</p>
<pre><code>'\u00A9' // &quot;©&quot;
</code></pre>
<h4 id="unicode-字元逸出">Unicode 字元逸出</h4>
<p>这是 ECMAScript 6 中的新特性。有了 Unicode 字元逸出，任何字符都可以用 16 进制数转义，这使得通过 Unicode 转义表示大于0x10FFFF的字符成为可能。使用简单的 Unicode 转义时通常需要分别写字符相应的两个部分（大于 0x10FFFF 的字符需要拆分为相应的两个小于 0x10FFFF 的部分）来达到同样的效果。</p>
<pre><code>'\u{2F804}'

// the same with simple Unicode escapes
'\uD87E\uDC04'
</code></pre>
<h3 id="12字符串对象">1.2字符串对象</h3>
<p>String 对象是对原始 string 类型的封装</p>
<pre><code>const foo = new String('foo'); // 创建一个 String 对象
console.log(foo); // 输出: [String: 'foo']
typeof foo; // 返回 'object'
</code></pre>
<p>你可以在 String 字面值上使用 String 对象的任何方法。JavaScript 自动把 String 字面值转换为一个临时的 String 对象，然后调用其相应方法，最后丢弃此临时对象。</p>
<p>除非必要， 应该尽量使用 String 字面值，因为 String 对象的某些行为可能并不与直觉一致。举例：</p>
<pre><code>const firstString = '2 + 2'; //创建一个字符串字面量
const secondString = new String('2 + 2'); // 创建一个字符串对象
eval(firstString); // 返回数字 4
eval(secondString); // 返回包含 &quot;2 + 2&quot; 的字符串对象
</code></pre>
<p>String 对象有一个属性 length，标识了字符串中 UTF-16 的码点个数。举例，下面的代码把 13 赋值给了helloLength，因为 &quot;Hello, World!&quot; 包含 13 个字符，每个字符用一个 UTF-16 码点表示。你可以通过数组的方式访问每一个码点，但你不能修改每个字符，因为字符串是不变的类数组对象：</p>
<pre><code>const hello = 'Hello, World!';
const helloLength = hello.length;
hello[0] = 'L'; // 无效，因为字符串是不变的
hello[0]; // 返回 &quot;H&quot;
</code></pre>
<p>String对象有许多方法：举例来说有些方法返回字符串本身的变体，如 和.substringtoUpperCase</p>
<p>下表总结了 String 对象的方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">charAt， charCodeAt， codePointAt</td>
<td style="text-align:left">返回字符串指定位置的字符或者字符编码。</td>
</tr>
<tr>
<td style="text-align:left">indexOf, lastIndexOf</td>
<td style="text-align:left">分别返回字符串中指定子串的位置或最后位置。</td>
</tr>
<tr>
<td style="text-align:left">startsWith, endsWith, includes</td>
<td style="text-align:left">返回字符串是否以指定字符串开始、结束或包含指定字符串。</td>
</tr>
<tr>
<td style="text-align:left">concat</td>
<td style="text-align:left">连接两个字符串并返回新的字符串。</td>
</tr>
<tr>
<td style="text-align:left">fromCharCode, fromCodePoint</td>
<td style="text-align:left">从指定的 Unicode 值序列构造一个字符串。这是一个 String 类方法，不是实例方法。</td>
</tr>
<tr>
<td style="text-align:left">split</td>
<td style="text-align:left">通过将字符串分离成一个个子串来把一个 String 对象分裂到一个字符串数组中。</td>
</tr>
<tr>
<td style="text-align:left">slice</td>
<td style="text-align:left">从一个字符串提取片段并作为新字符串返回。</td>
</tr>
<tr>
<td style="text-align:left">substring, substr</td>
<td style="text-align:left">分别通过指定起始和结束位置，起始位置和长度来返回字符串的指定子集。</td>
</tr>
<tr>
<td style="text-align:left">match, replace, search</td>
<td style="text-align:left">通过正则表达式来工作。</td>
</tr>
<tr>
<td style="text-align:left">toLowerCase, toUpperCase</td>
<td style="text-align:left">分别返回字符串的小写表示和大写表示</td>
</tr>
<tr>
<td style="text-align:left">normalize</td>
<td style="text-align:left">按照指定的一种 Unicode 正规形式将当前字符串正规化。</td>
</tr>
<tr>
<td style="text-align:left">repeat</td>
<td style="text-align:left">将字符串内容重复指定次数后返回。</td>
</tr>
<tr>
<td style="text-align:left">trim</td>
<td style="text-align:left">去掉字符串开头和结尾的空白字符。</td>
</tr>
</tbody>
</table>
<h3 id="13多行模板字符串">1.3多行模板字符串</h3>
<p>模板字符串是一种允许内嵌表达式的 String 字面值。可以用它实现多行字符串或者字符串内插等特性。</p>
<p>模板字符串使用反勾号 (<code></code>) (grave accent) 包裹内容而不是单引号或双引号。模板字符串可以包含占位符. 占位符用美元符号和花括号标识 (${expression})</p>
<h4 id="多行">多行</h4>
<p>源代码中插入的任何新行开始字符都作为模板字符串的内容。使用一般的字符串时，为了创建多行的字符串不得不用如下语法：</p>
<pre><code>console.log(&quot;string text line 1\n\
string text line 2&quot;);
// &quot;string text line 1
// string text line 2&quot;
</code></pre>
<p>为了实现同样效果的多行字符串，现在可以写成如下形式：</p>
<pre><code>console.log(`string text line 1
string text line 2`);
// &quot;string text line 1
// string text line 2&quot;
</code></pre>
<h4 id="嵌入表达式">嵌入表达式</h4>
<p>为了在一般的字符串中嵌入表达式，需要使用如下语法：</p>
<pre><code>const five = 5;
const ten = 10;
console.log('Fifteen is ' + (five + ten) + ' and not ' + (2 * five + ten) + '.');
// &quot;Fifteen is 15 and not 20.&quot;
</code></pre>
<p>现在，使用模板字符串，可以使用语法糖让类似功能的实现代码更具可读性：</p>
<pre><code>const five = 5;
const ten = 10;
console.log(`Fifteen is ${five + ten} and not ${2 * five + ten}.`);
// &quot;Fifteen is 15 and not 20.&quot;
</code></pre>
<h2 id="2国际化">2.国际化</h2>
<p>Intl 对象是 ECMAScript 国际化 API 的命名空间，它提供了语言敏感的字符串比较，数字格式化和日期时间格式化功能. Collator, NumberFormat, 和 DateTimeFormat 对象的构造函数是Intl对象的属性。</p>
<h3 id="21日期和时间格式化">2.1日期和时间格式化</h3>
<p>DateTimeFormat 对象在日期和时间的格式化方面很有用。下面的代码把一个日期格式化为美式英语格式.(不同时区结果不同)</p>
<pre><code>const msPerDay = 24 * 60 * 60 * 1000;

// July 17, 2014 00:00:00 UTC.
const july172014 = new Date(msPerDay * (44 * 365 + 11 + 197));
//2014-1970=44 年
//这样创建日期真是醉人。。。还要自己计算天数。。。11 是闰年中多出的天数。。。
//197 是 6×30+16(7 月的 16 天)+3(3 个大月)-2(2 月少 2 天)

const options = { year: &quot;2-digit&quot;, 
                            month: &quot;2-digit&quot;,
                            day: &quot;2-digit&quot;,
                            hour: &quot;2-digit&quot;, 
                            minute: &quot;2-digit&quot;, 
                            timeZoneName: &quot;short&quot; 
                            };
const americanDateTime = new Intl.DateTimeFormat(&quot;en-US&quot;, options).format;

console.log(americanDateTime(july172014)); // 07/16/14, 5:00 PM PDT
</code></pre>
<h3 id="22数字格式化">2.2数字格式化</h3>
<p>NumberFormat 对象在数字的格式化方面很有用，比如货币数量值。</p>
<pre><code>var gasPrice = new Intl.NumberFormat(&quot;en-US&quot;,
                        { style: &quot;currency&quot;, currency: &quot;USD&quot;,
                          minimumFractionDigits: 3 });

console.log(gasPrice.format(5.259)); // $5.259

var hanDecimalRMBInChina = new Intl.NumberFormat(&quot;zh-CN-u-nu-hanidec&quot;,
                        { style: &quot;currency&quot;, currency: &quot;CNY&quot; });

console.log(hanDecimalRMBInChina.format(1314.25)); // ￥ 一，三一四。二五
</code></pre>
<h3 id="23定序">2.3定序</h3>
<p>Collator 对象在字符串比较和排序方面很有用。</p>
<p>举例，德语中有两种不同的排序方式 电话本（phonebook） 和 字典（dictionary）. 电话本排序强调发音，比如在排序前 “ä”, “ö”等被扩展为 “ae”, “oe”等发音。</p>
<pre><code>var names = [&quot;Hochberg&quot;, &quot;Hönigswald&quot;, &quot;Holzman&quot;];

var germanPhonebook = new Intl.Collator(&quot;de-DE-u-co-phonebk&quot;);

// as if sorting [&quot;Hochberg&quot;, &quot;Hoenigswald&quot;, &quot;Holzman&quot;]:
console.log(names.sort(germanPhonebook.compare).join(&quot;, &quot;));
// logs &quot;Hochberg, Hönigswald, Holzman&quot;
</code></pre>
<p>有些德语词包含变音，所以在字典中忽略变音进行排序是合理的 (除非待排序的单词只有变音部分不同：schon 先于 schön).</p>
<pre><code>var germanDictionary = new Intl.Collator(&quot;de-DE-u-co-dict&quot;);

// as if sorting [&quot;Hochberg&quot;, &quot;Honigswald&quot;, &quot;Holzman&quot;]:
console.log(names.sort(germanDictionary.compare).join(&quot;, &quot;));
// logs &quot;Hochberg, Holzman, Hönigswald&quot;
</code></pre>
<p>国际化的内容看看就好😀</p>
<h1 id="五-正则表达式">五、正则表达式</h1>
<p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法，以及 String 的 match、matchAll、replace、search 和 split 方法。</p>
<h2 id="1创建一个正则表达式">1.创建一个正则表达式</h2>
<p>你可以使用以下两种方法构建一个正则表达式：<br>
①使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：</p>
<pre><code>var re = /ab+c/;
</code></pre>
<p>脚本加载后，正则表达式字面量就会被编译。当正则表达式<font color="red">保持不变</font>时，使用此方法可获得更好的性能。</p>
<p>②调用RegExp对象的构造函数，如下所示：</p>
<pre><code>var re = new RegExp(&quot;ab+c&quot;);
</code></pre>
<p>在脚本运行过程中，用构造函数创建的正则表达式会被编译。如果正则表达式将会改变，或者它将会从用户输入等来源中动态地产生，就需要使用构造函数来创建正则表达式。</p>
<h2 id="2编写一个正则表达式的模式">2.编写一个正则表达式的模式</h2>
<p>一个正则表达式模式是由简单的字符所构成的，比如 /abc/；或者是简单和特殊字符的组合，比如 /ab*c/ 或 /Chapter (\d+).\d*/。</p>
<h3 id="21使用简单模式">2.1使用简单模式</h3>
<p>是由你想直接找到的字符构成。比如，/abc/ 这个模式就<font color="red">能且仅能</font>匹配 &quot;abc&quot; 字符按照顺序同时出现的情况。例如在 &quot;Hi, do you know your abc's?&quot; 和 &quot;The latest airplane designs evolved from slabcraft.&quot; 中会匹配成功。在上述两个例子中，匹配的子字符串是 &quot;abc&quot;。但是在 &quot;Grab crab&quot; 中会匹配失败，因为它虽然包含子字符串 &quot;ab c&quot;，但并不是准确的 &quot;abc&quot;。</p>
<h3 id="22使用特殊字符">2.2使用特殊字符</h3>
<p>当你需要匹配一个不确定的字符串时，比如寻找一个或多个 &quot;b&quot;，或者寻找空格，可以在模式中使用特殊字符。比如，你可以使用 /ab*c/ 去匹配一个单独的 &quot;a&quot; 后面跟了零个或者多个 &quot;b&quot;，同时后面跟着 &quot;c&quot; 的字符串：*的意思是前一项出现零次或者多次。在字符串 &quot;cbbabbbbcdebc&quot; 中，这个模式匹配了子字符串 &quot;abbbbc&quot;。</p>
<p>正则表达式中可以利用的特殊字符的完整列表和描述 可以通过查阅相关文章获取</p>
<h4 id="使用转义字符">使用转义字符</h4>
<p>如果你需要使用任何特殊字符的字面值（例如，搜索字符'*'），你必须通过在它前面放一个反斜杠来转义它。 例如，要搜索'a'后跟'*'后跟'b'，你应该使用/a\<em>b/- 反斜杠“转义”字符'</em>'，使其成为文字而非特殊符号。</p>
<p>类似地，如果您正在编写正则表达式文字并且需要匹配斜杠（'/'），那么需要转义它（否则，斜杠是正则终止符）。 例如，要搜索字符串“/ example /”后跟一个或多个字母字符，您需要使用//example/[a-z]+/i——每个斜杠之前使用反斜杠使它们成为普通字符。</p>
<p>要匹配文本符号反斜杠，您需要转义反斜杠。 例如，要匹配字符串“C:\”，其中“C”可以是任何字母，您将使用/[A-Z]:\/ —— 第一个反斜杠转义后面的那个反斜杠，因此表达式搜索单个普通字符反斜杠。</p>
<p>如果将 RegExp 构造函数与字符串文字一起使用，请记住反斜杠是字符串文字中的转义，因此要在正则表达式中使用它，您需要在字符串文字级别转义它。 /a\*b/ 和new RegExp(&quot;a\*b&quot;)创建的表达式是相同的，搜索“a”后跟文字“*”后跟“b”。</p>
<p>将用户输入转义为正则表达式中的一个字面字符串，可以通过简单的替换来实现：</p>
<pre><code>function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, &quot;\\$&amp;&quot;);
  //$&amp;表示整个被匹配的字符串
}
</code></pre>
<p>正则表达式后的&quot;g&quot;是一个表示全局搜索选项或标记，将在整个字符串查找并返回所有匹配结果。这将在下面的通过标志进行高级搜索详述。</p>
<h3 id="23使用插入语">2.3使用插入语</h3>
<p>任何正则表达式的插入语都会使这部分匹配的副字符串被记忆。一旦被记忆，这个副字符串就可以被调用于其它用途。</p>
<p>比如， /Chapter (\d+).\d*/ 解释了额外转义的和特殊的字符，并说明了这部分 pattern 应该被记忆。它精确地匹配后面跟着一个以上数字字符的字符 'Chapter ' (\d 意为任何数字字符，+ 意为 1 次以上)，跟着一个小数点（在这个字符中本身也是一个特殊字符；小数点前的 \ 意味着这个 pattern 必须寻找字面字符 '.')，跟着任何数字字符 0 次以上。 (\d 意为数字字符， * 意为 0 次以上)。另外，插入语也用来记忆第一个匹配的数字字符。</p>
<p>此模式可以匹配字符串&quot;Open Chapter 4.3, paragraph 6&quot;，并且'4'将会被记住。此模式并不能匹配&quot;Chapter 3 and 4&quot;，因为在这个字符串中'3'的后面没有点号'.'。</p>
<p>括号中的&quot;?:&quot;，这种模式匹配的子字符串将不会被记住。比如，(?:\d+) 匹配一次或多次数字字符，但是不能记住匹配的字符。</p>
<h1 id="3使用正则表达式">3.使用正则表达式</h1>
<p>正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search 和 split 方法。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">exec</td>
<td style="text-align:left">一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</td>
</tr>
<tr>
<td style="text-align:left">test</td>
<td style="text-align:left">一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。</td>
</tr>
<tr>
<td style="text-align:left">match</td>
<td style="text-align:left">一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td>
</tr>
<tr>
<td style="text-align:left">matchAll</td>
<td style="text-align:left">一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td style="text-align:left">replace</td>
<td style="text-align:left">一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td style="text-align:left">split</td>
<td style="text-align:left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</td>
</tr>
</tbody>
</table>
<p>当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用 test 或 search 方法；想得到更多的信息（但是比较慢）则可以使用 exec 或 match 方法。如果你使用 exec 或 match 方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么 exec 方法返回 null（也就是 false）。</p>
<p>在接下来的例子中，脚本将使用 exec 方法在一个字符串中查找一个匹配。</p>
<pre><code>var myRe = /d(b+)d/g;
var myArray = myRe.exec(&quot;cdbbdbsbz&quot;);
</code></pre>
<p>如果你不需要访问正则表达式的属性，这个脚本通过另一个方法来创建 myArray：</p>
<pre><code>var myArray = /d(b+)d/g.exec(&quot;cdbbdbsbz&quot;);
// 和 &quot;cdbbdbsbz&quot;.match(/d(b+)d/g); 相似。
// 但是 &quot;cdbbdbsbz&quot;.match(/d(b+)d/g) 输出数组 [ &quot;dbbd&quot; ]，
// 而 /d(b+)d/g.exec('cdbbdbsbz') 输出数组 [ &quot;dbbd&quot;, &quot;bb&quot;, index: 1, input: &quot;cdbbdbsbz&quot; ].
</code></pre>
<p>如果你想通过一个字符串构建正则表达式，那么这个脚本还有另一种方法：</p>
<pre><code>var myRe = new RegExp(&quot;d(b+)d&quot;, &quot;g&quot;);
var myArray = myRe.exec(&quot;cdbbdbsbz&quot;);
</code></pre>
<p>通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性。</p>
<p>如这个例子中的第二种形式所示，你可以使用对象初始器创建一个正则表达式实例，但不分配给变量。如果你这样做，那么，每一次使用时都会创建一个新的正则表达式实例。因此，如果你不把正则表达式实例分配给一个变量，你以后将不能访问这个正则表达式实例的属性。例如，假如你有如下脚本：</p>
<pre><code>var myRe = /d(b+)d/g;
var myArray = myRe.exec(&quot;cdbbdbsbz&quot;);
console.log(&quot;The value of lastIndex is &quot; + myRe.lastIndex);
</code></pre>
<p>这个脚本输出如下：</p>
<pre><code>The value of lastIndex is 5
</code></pre>
<p>然而，如果你有如下脚本：</p>
<pre><code>var myArray = /d(b+)d/g.exec(&quot;cdbbdbsbz&quot;);
console.log(&quot;The value of lastIndex is &quot; + /d(b+)d/g.lastIndex);
</code></pre>
<p>它显示为：</p>
<pre><code>The value of lastIndex is 0
</code></pre>
<p>当发生/d(b+)d/g 使用两个不同状态的正则表达式对象，lastIndex 属性会得到不同的值。如果你需要访问一个正则表达式的属性，则需要创建一个对象初始化生成器，你应该首先把它赋值给一个变量。</p>
<h3 id="31使用括号的子字符串匹配">3.1使用括号的子字符串匹配</h3>
<p>一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素 [1],……[n]。</p>
<p>使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。</p>
<p>下面的脚本使用 replace() 方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2 表示第一个和第二个括号的子字符串匹配。</p>
<pre><code>var re = /(\w+)\s(\w+)/;
var str = &quot;John Smith&quot;;
var newstr = str.replace(re, &quot;$2, $1&quot;);
console.log(newstr);//&quot;Smith, John&quot;
</code></pre>
<h3 id="32通过标志进行高级搜索">3.2通过标志进行高级搜索</h3>
<p>正则表达式有六个可选参数 (flags) 允许全局和不分大小写搜索等。这些参数既可以单独使用也能以任意顺序一起使用，并且被包含在正则表达式实例中。<br>
①g	全局搜索。<br>
②i	不区分大小写搜索。<br>
③m	多行搜索。<br>
④s	允许 . 匹配换行符。<br>
⑤u	使用 unicode 码的模式进行匹配。<br>
⑥y	执行“粘性 (sticky)”搜索，匹配从目标字符串的当前位置开始。<br>
语法如下：</p>
<pre><code>var re = /pattern/flags;
//或者
var re = new RegExp(&quot;pattern&quot;, &quot;flags&quot;);
</code></pre>
<p>值得注意的是，标志是一个正则表达式的一部分，它们在接下来的时间将不能添加或删除。</p>
<p>例如，re = /\w+\s/g 将创建一个查找一个或多个字符后有一个空格的正则表达式，或者组合起来像此要求的字符串。</p>
<pre><code>var re = /\w+\s/g;  //等价于var re = new RegExp(&quot;\\w+\\s&quot;, &quot;g&quot;);
var str = &quot;fee fi fo fum&quot;;
var myArray = str.match(re);
console.log(myArray);

// [&quot;fee &quot;, &quot;fi &quot;, &quot;fo &quot;]
</code></pre>
<h1 id="六-索引类集合">六、索引类集合</h1>
<p>这个章节主要介绍了以索引进行排序的数据集合。包括数组以及类似于数组的数据结构，如 Array 、TypedArray 。</p>
<h2 id="1数组对象">1.数组对象</h2>
<p>数组 (array) 是一个<font color="red">有序</font>的数据集合，我们可以通过数组名称和索引进行访问。</p>
<p>JavaScript 中没有明确的数组数据类型。但是，我们可以通过使用内置 Array 对象和它的方法对数组进行操作。</p>
<h3 id="11创建数组">1.1创建数组</h3>
<p>以下的语句皆可以创建等效的数组：</p>
<pre><code>var arr = new Array(element0, element1, ..., elementN);
var arr = Array(element0, element1, ..., elementN);
var arr = [element0, element1, ..., elementN];

//  var arr=[4] 和 var arr=new Array(4) 是不等效的，
// 后者 4 指数组长度，所以使用字面值 (literal) 的方式应该不仅仅是便捷，同时也不易踩坑
</code></pre>
<p>为了创建一个长度不为 0，但是又没有任何元素的数组，可选以下任何一种方式：</p>
<pre><code>var arr = new Array(arrayLength);
var arr = Array(arrayLength);

// 这样有同样的效果
var arr = [];
arr.length = arrayLength;
</code></pre>
<p>注：以上代码，数组长度（arrayLength）必须为一个数字。否则，将会创建一个只有单个（所输入的）元素的数组。 调用 arr.length 会返回数组长度，但是数组实际上包含了空的（undefined）元素。 因此在数组上使用 for...in 循环，将不会返回任何的值 。</p>
<p>除了如上所示创建新定义的变量，数组 (array) 也可以作为一个属性 (property) 分配给一个新的或者已存在的对象 (object)：</p>
<pre><code>var obj = {};
// ...
obj.prop = [element0, element1, ..., elementN];

// OR
var obj = {prop: [element0, element1, ...., elementN]}
</code></pre>
<p>如果你希望用单个元素初始化一个数组，而这个元素恰好又是数字 (Number)，那么你必须使用括号语法。当单个的数字 (Number) 传递给 Array() 构造函数时，将会被解释为数组长度，并非单个元素。</p>
<pre><code>var arr = [42];      // 创建一个只有唯一元素的数组：

var arr = Array(42); // 创建一个没有元素的数组，
                     // 但是数组的长度被设置成 42.

// 上面的代码与下面的代码等价
var arr = [];
arr.length = 42;
</code></pre>
<p>如果 N 不是一个整数，调用Array(N)将会报RangeError错误</p>
<pre><code>var arr = Array(9.3);  // RangeError: Invalid array length
</code></pre>
<p>如果你需要创建任意类型的单元素数组，安全的方式是使用字面值。或者在向数组添加单个元素之前先创建一个空的数组。</p>
<h3 id="12填充数组">1.2填充数组</h3>
<p>你可以通过给元素赋值来填充数组，例如：</p>
<pre><code>var emp = [];
emp[0] = &quot;Casey Jones&quot;;
emp[1] = &quot;Phil Lesh&quot;;
emp[2] = &quot;August West&quot;;
</code></pre>
<p>注：如果你在以上代码中给数组操作符的是一个非整形数值，那么将作为一个代表数组的对象的属性 (property) 创建，而非作为数组的元素。</p>
<pre><code>var arr = [];
arr[3.4] = &quot;Oranges&quot;;
console.log(arr);  //[3.4:&quot;Oranges&quot;]
console.log(arr.length);  // 0
console.log(arr.hasOwnProperty(3.4));   // true
</code></pre>
<p>你也可以在创建数组的时候去填充数组：</p>
<pre><code>var myArray = new Array(&quot;Hello&quot;, myVar, 3.14159);

var myArray = [&quot;Mango&quot;, &quot;Apple&quot;, &quot;Orange&quot;]
</code></pre>
<h3 id="13引用数组元素">1.3引用数组元素</h3>
<p>你通过可以使用元素的序号来引用数组的元素。例如，假设你定义了如下数组：</p>
<pre><code>var myArray = [&quot;Wind&quot;, &quot;Rain&quot;, &quot;Fire&quot;];
</code></pre>
<p>你可以用 myArray[0]引用第一个元素，myArray[1]引用第二个元素。元素的索引是从0开始的。</p>
<p>注： 数组操作符（[ ]）也可以用来访问数组的属性 (在 JavaScript 中，数组也是对象)。例如：</p>
<pre><code>var arr = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];
arr[2];  // three
arr[&quot;length&quot;];  // 3
</code></pre>
<h4 id="理解length">理解length</h4>
<p>在实施层面， JavaScript 实际上是将元素作为标准的对象属性来存储，把数组索引作为属性名。长度属性是特殊的，它总是返回最后一个元素的索引值加 1(下例中， Dusty 的索引是 30，所以 cats.length 返回 30 + 1)。</p>
<pre><code>var cats = [];
cats[30] = ['Dusty'];
console.log(cats[0]);//undefined
console.log(cats.length); // 31
</code></pre>
<p>你也可以分配length属性。写一个小于数组元素数量的值会缩短数组，写 0 会彻底清空数组：</p>
<pre><code>var cats = ['Dusty', 'Misty', 'Twiggy'];
console.log(cats.length); // 3

cats.length = 2;
console.log(cats); // logs &quot;Dusty,Misty&quot; - Twiggy has been removed

cats.length = 0;
console.log(cats); // logs nothing; the cats array is empty

cats.length = 3;
console.log(cats); // [undefined, undefined, undefined]
</code></pre>
<p>注：<font color="red">一定是小于！！！</font></p>
<h3 id="14遍历数组">1.4遍历数组</h3>
<p>遍历数组元素并以某种方式处理每个元素是一个常见的操作。以下是最简单的方式：</p>
<pre><code>var colors = ['red', 'green', 'blue'];
for (var i = 0; i &lt; colors.length; i++) {
  console.log(colors[i]);
}
</code></pre>
<p><font color="red">前方高能！</font>👊<br>
如果你确定数组中没有一个元素的求值是 false —— 如果你的数组只包含DOM节点，如下，你可以选择一个更高效的土法子：</p>
<pre><code>var divs = document.getElementsByTagName('div');
for (var i = 0, div; div = divs[i]; i++) {
  /* Process div in some way */
}
</code></pre>
<p>这样避免了检测数组长度的开销，额外的好处是确保了 div 变量当前在每次循环中都被重新赋值为当前项。</p>
<p>forEach() 方法提供了遍历数组元素的其他方法：</p>
<pre><code>var colors = ['red', 'green', 'blue'];
colors.forEach(function(color) {
  console.log(color);
});
</code></pre>
<p>被传递给 forEach 的函数会在数组的每个元素上执行一次，元素作为参数传递给该函数。未赋值的值不会在 forEach 循环迭代。</p>
<p>注意，在数组定义时省略的元素不会在 forEach 遍历时被列出，但是手动赋值为 undefined 的元素是会被列出的：</p>
<pre><code>var array = ['first', 'second', , 'fourth'];

// returns ['first', 'second', 'fourth'];
array.forEach(function(element) {
  console.log(element);
})

if(array[2] === undefined) { console.log('array[2] is undefined'); } // true

var array = ['first', 'second', undefined, 'fourth'];

// returns ['first', 'second', undefined, 'fourth'];
array.forEach(function(element) {
  console.log(element);
})
</code></pre>
<p>一旦 JavaScript 元素被保存为标准的对象属性，通过for...in 循环来迭代数组将变得不明智，因为正常元素和所有<font color="red">可枚举的属性</font>都会被列出。</p>
<h3 id="15数组的方法">1.5数组的方法</h3>
<p>Array 对象具有下列方法：<br>
concat() 连接两个数组并返回一个新的数组。</p>
<pre><code>var myArray = new Array(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
myArray = myArray.concat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);
// myArray is now [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre>
<p>join('xxx') 将数组的所有元素连接成一个字符串。</p>
<pre><code>var myArray = new Array(&quot;Wind&quot;, &quot;Rain&quot;, &quot;Fire&quot;);
var list = myArray.join(&quot; - &quot;); // &quot;Wind - Rain - Fire&quot;
</code></pre>
<p>push() 在数组末尾添加一个或多个元素，<font color="red">并返回数组操作后的长度</font>。</p>
<pre><code>var myArray = new Array(&quot;1&quot;, &quot;2&quot;);
myArray.push(&quot;3&quot;); // myArray is now [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]
</code></pre>
<p>pop() 从数组移出最后一个元素，并返回该元素。</p>
<pre><code>var myArray = new Array(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
var last = myArray.pop();
// myArray is now [&quot;1&quot;, &quot;2&quot;], last = &quot;3&quot;
</code></pre>
<p>shift() 从数组移出第一个元素，并返回该元素。</p>
<pre><code>var myArray = new Array (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
var first = myArray.shift();
// myArray is now [&quot;2&quot;, &quot;3&quot;], first is &quot;1&quot;
</code></pre>
<p>unshift() 在数组开头添加一个或多个元素，并返回数组的新长度。</p>
<pre><code>var myArray = new Array (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
myArray.unshift(&quot;4&quot;, &quot;5&quot;);
// myArray becomes [&quot;4&quot;, &quot;5&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;]
</code></pre>
<p>slice(start_index, upto_index) 从数组提取一个片段，并作为一个新数组返回。</p>
<pre><code>var myArray = new Array (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);
myArray = myArray.slice(1, 4); // 包含索引 1，不包括索引 4
                               // returning [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]
</code></pre>
<p>splice(index, count_to_remove, addElement1, addElement2, ...)从数组移出一些元素，（可选）并替换它们。</p>
<pre><code>var myArray = new Array (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;);
myArray.splice(1, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;);
// myArray is now [&quot;1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;5&quot;]
// This code started at index one (or where the &quot;2&quot; was),
// removed 3 elements there, and then inserted all consecutive
// elements in its place.
</code></pre>
<p>reverse() 颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。</p>
<pre><code>var myArray = new Array (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
myArray.reverse();
// transposes the array so that myArray = [ &quot;3&quot;, &quot;2&quot;, &quot;1&quot; ]
</code></pre>
<p>sort() 给数组元素排序。(快排)</p>
<pre><code>var myArray = new Array(&quot;Wind&quot;, &quot;Rain&quot;, &quot;Fire&quot;);
myArray.sort();
// sorts the array so that myArray = [ &quot;Fire&quot;, &quot;Rain&quot;, &quot;Wind&quot; ]
</code></pre>
<p>sort() 也可以带一个回调函数来决定怎么比较数组元素。这个回调函数比较两个值，并返回 3 个值中的一个。<br>
例如，下面的代码通过字符串的最后一个字母进行排序：</p>
<pre><code>var sortFn = function(a, b){
  if (a[a.length - 1] &lt; b[b.length - 1]) return -1;
  if (a[a.length - 1] &gt; b[b.length - 1]) return 1;
  if (a[a.length - 1] == b[b.length - 1]) return 0;
}
myArray.sort(sortFn);
// sorts the array so that myArray = [&quot;Wind&quot;,&quot;Fire&quot;,&quot;Rain&quot;]
</code></pre>
<p>如果 a 小于 b ，返回 -1(或任何负数)<br>
如果 a 大于 b ，返回 1 (或任何正数)<br>
如果 a 和 b 相等，返回 0。</p>
<p>indexOf(searchElement[, fromIndex]) 在数组中搜索searchElement 并返回第一个匹配的索引。</p>
<pre><code>var a = ['a', 'b', 'a', 'b', 'a'];
console.log(a.indexOf('b')); // logs 1
// Now try again, starting from after the last match
console.log(a.indexOf('b', 2)); // logs 3
console.log(a.indexOf('z')); // logs -1, because 'z' was not found
</code></pre>
<p>lastIndexOf(searchElement[, fromIndex]) 和 indexOf 差不多，但这是从结尾开始，并且是反向搜索。</p>
<pre><code>var a = ['a', 'b', 'c', 'd', 'a', 'b'];
console.log(a.lastIndexOf('b')); // logs 5
// Now try again, starting from before the last match
console.log(a.lastIndexOf('b', 4)); // logs 1
console.log(a.lastIndexOf('z')); // logs -1
</code></pre>
<p>forEach(callback[, thisObject]) 在数组每个元素项上执行callback。</p>
<pre><code>var a = ['a', 'b', 'c'];
a.forEach(function(element) { console.log(element);} );
// logs each item in turn
</code></pre>
<p>map(callback[, thisObject]) 在数组的每个单元项上执行 callback 函数，并返回包含回调函数返回值的新数组（也就是遍历数组，通过 callback 对数组元素进行操作，并将所有操作结果放入数组中并返回该数组）。</p>
<pre><code>var a1 = ['a', 'b', 'c'];
var a2 = a1.map(function(item) { return item.toUpperCase(); });
console.log(a2); // logs A,B,C
</code></pre>
<p>filter(callback[, thisObject]) 返回一个包含所有在回调函数上返回为 true 的元素的新数组（callback 在这里担任的是过滤器的角色，当元素符合条件，过滤器就返回 true，而 filter 则会返回所有符合过滤条件的元素）。</p>
<pre><code>var a1 = ['a', 10, 'b', 20, 'c', 30];
var a2 = a1.filter(function(item) { return typeof item == 'number'; });
console.log(a2); // logs 10,20,30
</code></pre>
<p>every(callback[, thisObject]) 当数组中每个元素都在 callback 上被返回 true 时就返回 true（同上，every 其实类似 filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。</p>
<pre><code>function isNumber(value){
  return typeof value == 'number';
}
var a1 = [1, 2, 3];
console.log(a1.every(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.every(isNumber)); // logs false
</code></pre>
<p>some(callback[, thisObject]) 只要数组中有一项在 callback 上被返回 true，就返回 true（同上，类似 every，不过前者要求都符合筛选条件才返回 true，后者只要有符合条件的就返回 true）。</p>
<pre><code>function isNumber(value){
  return typeof value == 'number';
}
var a1 = [1, 2, 3];
console.log(a1.some(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.some(isNumber)); // logs true
var a3 = ['1', '2', '3'];
console.log(a3.some(isNumber)); // logs false
</code></pre>
<p>以上方法都带一个被称为迭代方法的的回调函数，因为他们以某种方式迭代整个数组。都有一个可选的第二参数 thisObject，如果提供了这个参数，thisObject 变成回调函数内部的 this 关键字的值。如果没有提供，例如函数在一个显示的对象上下文外被调用时，this 将引用全局对象 (window).</p>
<p>实际上在调用回调函数时传入了 3 个参数。第一个是当前元素项的值，第二个是它在数组中的索引，第三个是数组本身的一个引用。 JavaScript 函数忽略任何没有在参数列表中命名的参数，因此提供一个只有一个参数的回调函数是安全的，例如 alert 。</p>
<p>reduce(callback[, initialValue]) 使用回调函数 callback(firstValue, secondValue) 把数组列表计算成一个单一值（数组元素两两递归处理的方式把数组计算成一个值）</p>
<pre><code>var a = [10, 20, 30];
var total = a.reduce(function(first, second) { return first + second; }, 0);
console.log(total) // Prints 60
</code></pre>
<p>reduceRight(callback[, initalvalue]) 和 reduce() 相似，但这从最后一个元素开始的。</p>
<p>reduce 和 reduceRight 是迭代数组方法中最不被人熟知的两个函数.。他们应该使用在那些需要把数组的元素两两递归处理，并最终计算成一个单一结果的算法。</p>
<h3 id="16多维数组">1.6多维数组</h3>
<p>数组是可以嵌套的，这就意味着一个数组可以作为一个元素被包含在另外一个数组里面。利用 JavaScript 数组的这个特性，可以创建多维数组。</p>
<p>以下代码创建了一个二维数组。</p>
<pre><code>var a = new Array(4);
for (i = 0; i &lt; 4; i++) {
  a[i] = new Array(4);
  for (j = 0; j &lt; 4; j++) {
    a[i][j] = &quot;[&quot; + i + &quot;,&quot; + j + &quot;]&quot;;
  }
}
</code></pre>
<p>这个例子创建的数组拥有以下行数据：</p>
<pre><code>Row 0: [0,0] [0,1] [0,2] [0,3]
Row 1: [1,0] [1,1] [1,2] [1,3]
Row 2: [2,0] [2,1] [2,2] [2,3]
Row 3: [3,0] [3,1] [3,2] [3,3]
</code></pre>
<h3 id="17数组和正则表达式">1.7数组和正则表达式</h3>
<p>当一个数组作为字符串和正则表达式的匹配结果时，该数组将会返回相关匹配信息的属性和元素。 RegExp.exec(), String.match() 和 String.split() 的返回值是一个数组。</p>
<h3 id="18使用类数组对象">1.8使用类数组对象</h3>
<p>一些 JavaScript 对象，例如 document.getElementsByTagName() 返回的 NodeList 或者函数内部可用的 arguments 对象，他们表面上看起来，外观和行为像数组，但是不共享他们所有的方法。例如 arguments 对象就提供一个 length 属性，但是不实现 forEach() 方法。</p>
<p>Array 的原生 (prototype) 方法可以用来处理类似数组行为的对象，例如： :</p>
<pre><code>function printArguments() {
  Array.prototype.forEach.call(arguments, function(item) {
    console.log(item);
  });
}
</code></pre>
<p>Array 的常规方法也可以用于处理字符串，因为它提供了序列访问字符转为数组的简单方法：</p>
<pre><code>Array.prototype.forEach.call(&quot;a string&quot;, function(chr) {
  console.log(chr);
});
</code></pre>
<h2 id="2数组推导式">2.数组推导式</h2>
<p>数组推导式用来实现在另一个数组的基础上构造一个新的数组。推导式可以经常被用在那些需要调用 map() 和 filter() 函数的地方，或作为一种结合这两种函数的方式。</p>
<p>下面的推导式创建一个数字数组并且创建一个新的数组，数组的每个元素都是原来数值的两倍。</p>
<pre><code>var numbers = [1, 2, 3, 4];
var doubled = [for (i of numbers) i * 2];
console.log(doubled); // logs 2,4,6,8
</code></pre>
<p>这跟下面的 map() 方法的操作是等价的。</p>
<pre><code>var doubled = numbers.map(function(i){return i * 2;});
</code></pre>
<p>推导式也可以用来筛选满足条件表达式的元素。下面的推导式用来筛选是 2 的倍数的元素：</p>
<pre><code>var numbers = [1, 2, 3, 21, 22, 30];
var evens = [i for (i of numbers) if (i % 2 === 0)];
console.log(evens); // logs 2,22,30
</code></pre>
<p>filter() 也可以达到相同的目的：</p>
<pre><code>var evens = numbers.filter(function(i){return i % 2 === 0;});
</code></pre>
<p>map() 和 filter() 类型的操作可以被组合（等效）为单个数组推导式。这里就有一个过滤出偶数，创建一个它的倍数数组的例子：</p>
<pre><code>var numbers = [1, 2, 3, 21, 22, 30];
var doubledEvens = [i * 2 for (i of numbers) if (i % 2 === 0)];
console.log(doubledEvens); // logs 4,44,60
</code></pre>
<p>数组推导式隐含了块作用域。新的变量 (如例子中的 i) 类似于是采用let声明的。这意味着他们不能在推导式以外访问。</p>
<p>数组推导式的输入不一定必须是数组; 迭代器和生成器 也是可以的。</p>
<p>甚至字符串也可以用来作为输入; 实现 filter 或者 map 行为 (参考上面类似数组行为的对象) 如下：</p>
<pre><code>var str = 'abcdef';
var consonantsOnlyStr = [c for (c of str) if (!(/[aeiouAEIOU]/).test(c))  ].join(''); // 'bcdf'
var interpolatedZeros = [c+'0' for (c of str) ].join(''); // 'a0b0c0d0e0f0'
</code></pre>
<p>不过，输入形式是不能保存的，所以我们要使用 join() 回复到一个字符串。</p>
<h2 id="3类型化数组">3.类型化数组</h2>
<p>类型化数组是类数组对象，其提供访问原始二进制数据的机制。 就像你知道的那样，Array 对象动态增长和收缩，可以有任何 JavaScript 值。但对于类型化数组，JavaScript 引擎执行优化使得这些数组访问速度快速。 随着 Web 应用程序变得越来越强大，添加音频和视频处理等功能、可以使用 WebSockets 、使用原始数据， 这都需要访问原始的二进制数据，所以专门的优化将有助于 JavaScript 代码能够快速和容易地操纵原始二进制数据类型的数组。</p>
<h3 id="31缓冲区和视图类型化的数组结构">3.1缓冲区和视图：类型化的数组结构</h3>
<p>为了实现最大的灵活性和效率，JavaScript 类型数组被分解为缓冲 (Buffer) 和视图 (views)。缓冲 (由ArrayBuffer 实现) 是代表数据块的对象，它没有格式可言，并没有提供任何机制来访问其内容。为了访问包含在缓冲区中的内存，您需要使用视图。视图提供了一个上下文，即数据类型、起始偏移量和元素数，这些元素将数据转换为实际类型数组。</p>
<h4 id="arraybuffer">ArrayBuffer</h4>
<p>ArrayBuffer是一种数据类型，用于表示一个通用的、固定长度的二进制数据缓冲区。你不能直接操纵一个 ArrayBuffer 中的内容；你需要创建一个数组类型视图或DataView来代表特定格式的缓冲区，并从而实现读写缓冲区的内容。</p>
<h4 id="类型数组视图">类型数组视图</h4>
<p>类型数组视图具有自描述性的名字，并且提供数据类型信息，例如Int8, Uint32, Float64 等等。如一个特定类型数组视图Uint8ClampedArray. 它意味着数据元素只包含 0 到 255 的整数值。它通常用于Canvas 数据处理。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDN JS学习笔记(基础1)]]></title>
        <id>https://uaenaTzx.github.io/post/mdn-js-xue-xi-bi-ji/</id>
        <link href="https://uaenaTzx.github.io/post/mdn-js-xue-xi-bi-ji/">
        </link>
        <updated>2022-09-01T06:54:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-前言">一、前言</h1>
<p>文章记录了本人在MDN上学习JS的全过程，冲冲冲👊👊👊</p>
<p>首先是初阶的基础内容</p>
<h1 id="二-语法和数据类型">二、语法和数据类型</h1>
<h2 id="1基础">1.基础</h2>
<p>①来源：借鉴了Java的大部分语法，单同时也受到Awk，Perl和Python的影响<br>
②大小写：JS是区分大小写的，并使用Unicode字符集<br>
③语句分隔：大部分的语言，语句之间用分号（;）进行分隔，但是JS对之并不严格。如果一条语句独占一行的话，那么分号是可以省略的。但如果一行中有多条语句，那么这些语句必须以分号分开。<br>
注：建议都加分号，避免不必要的意外bug<br>
④源码形式：JS源码从左往右被扫描并转换成一系列由 token 、控制字符、行终止符、注释和空白字符组成的输入元素。空白字符指的是空格、制表符和换行符等。</p>
<h2 id="2注释">2.注释</h2>
<pre><code>//单行注释
/*多行
注释
*/
</code></pre>
<p>在代码执行过程中，注释将被自动跳过（不执行）<br>
<font color="red">不可嵌套注释！！！</font><br>
注： 你可能会在一些 JavaScript 脚本中见到像这样#!/usr/bin/env node的第三种注释<br>
这种注释我们称为hashbang 注释 (hashbang comment)，这种注释被用来指定执行 JaveScript 脚本的引擎的路径，后续会有进一步说明</p>
<h2 id="3声明">3.声明</h2>
<p>JS有三种声明方式<br>
①var：声明一个变量，可选初始化一个值<br>
②let：声明一个块作用域的局部变量，可选初始化一个值<br>
③const：声明一个块作用域的只读常量</p>
<h3 id="31变量">3.1变量</h3>
<p>在应用程序中，使用变量来作为值的载体，变量又称标识符，需要遵守一定的规则：<br>
一个 JavaScript 标识符必须以字母、下划线（_）或者美元符号（$）开头</p>
<p>你可以使用大部分 ISO 8859-1 或 Unicode 编码的字符作标识符，例如 å 和 ü。你也可以使用 Unicode 转义字符 作标识符。</p>
<p>合法的标识符示例：<code>Number_hits</code>，<code>temp99</code>，<code>$credit</code> 和 <code>_name</code>。</p>
<h3 id="32声明变量">3.2声明变量</h3>
<p>你可以用以下三种方式声明变量<br>
①使用关键词<code>var</code>。例如：var x = 42。这个语法可以用来声明局部变量和全局变量<br>
②直接赋值。例如 x = 42。在函数外使用这种形式赋值，会产生一个<font color="red">全局变量</font>。在严格模式下会产生错误（因此不推荐这种方式）<br>
③使用关键词<code>let</code>。例如： let y = 13。这个语法可以用来声明块作用域的局部变量</p>
<p>你可以使用解构赋值将对象字面量的属性绑定到变量。就像这样let { bar } = foo。这会创建一个名为bar的变量，并且将foo对像中属性名与之相同的属性的值赋给它。</p>
<p>你也可以直接给属性赋值。像这样x = 42。这种声明方式将会创建一个未声明全局变量。这样做还会产生 JavaScript 警告。因为未声明的全局变量常常导致预期之外的行为，所以不建议使用。</p>
<h3 id="33变量求值">3.3变量求值</h3>
<p>用<code>var</code>或<code>let</code>语句声明的变量，如果没有赋初始值，则其值为<code>undefined</code>（在布尔类型环境中会被当作 <code>false</code>）</p>
<p>如果访问一个未声明的变量会导致抛出一个引用错误（ReferenceError）异常：</p>
<p>数值类型环境中 <code>undefined</code> 值会被转换为<code>NaN</code></p>
<pre><code>var a;
a + 2;    // 计算为 NaN
</code></pre>
<p>当你对一个 <code>null</code> 变量求值时，空值 <code>null</code> 在数值类型环境中会被当作 0 来对待，而布尔类型环境中会被当作 <code>false</code>。例如：</p>
<pre><code>var n = null;
console.log(n * 32); // 在控制台中会显示 0
</code></pre>
<h3 id="34变量的作用域">3.4变量的作用域</h3>
<p>在函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在当前函数的内部访问。</p>
<p>ES6之前的JS没有语句块作用域。语句块中声明的变量将成为语句块所在函数（或全局作用域）的局部变量。例如，如下的代码将在控制台输出 5，因为 x 的作用域是声明了 x 的那个函数（或全局范围），而不是 if 语句块。</p>
<pre><code>if (true) {
  var x = 5;
}
console.log(x); // 5
</code></pre>
<p>如果使用ES6中的<code>let</code>声明，则会出现下述变化：</p>
<pre><code>if (true) {
  let y = 5;
}
console.log(y); // ReferenceError: y 没有被声明
</code></pre>
<h3 id="35变量提升">3.5变量提升</h3>
<p>JS存在一个奇妙的特性：你可以先使用变量稍后再声明变量。这一概念被称之为”变量提升“。但是，提升后的变量将返回<code>undefined</code>值</p>
<pre><code>/**
 * 例子 1
 */
console.log(x === undefined); // true
var x = 3;

/**
 * 例子 2
 */
// will return a value of undefined
var myvar = &quot;my value&quot;;

(function() {
  console.log(myvar); // undefined
  var myvar = &quot;local value&quot;;
})();
</code></pre>
<p>由于存在变量提升，一个函数中所有的<code>var</code>语句应尽可能地放在接近函数顶部的地方（增加代码清晰度）</p>
<p>在ES6中，<code>let</code>和<code>const</code>同样会被提升变量到代码块的顶部但是不会被赋予初始值。在变量声明之前引用这个变量，将抛出引用错误（ReferenceError）。这个变量将从代码块一开始的时候就处在一个“暂时性死区”，直到这个变量被声明为止。</p>
<pre><code>console.log(x); // ReferenceError
let x = 3;
</code></pre>
<h3 id="36函数提升">3.6函数提升</h3>
<p>对于函数来说，只有函数声明会被提升到顶部，然而函数表达式不会被提升</p>
<pre><code>/* 函数声明 */
foo(); // &quot;bar&quot;

function foo() {
  console.log(&quot;bar&quot;);
}

/* 函数表达式 */
baz(); // 类型错误：baz 不是一个函数

var baz = function() {
  console.log(&quot;bar2&quot;);
};
</code></pre>
<h3 id="37全局变量">3,7全局变量</h3>
<p>实际上，全局变量是全局对象的属性。在网页中，全局对象是 window ，所以你可以用形如 window.*variable *的语法来设置和访问全局变量。</p>
<p>因此，你可以通过指定 window 或 frame 的名字，在当前 window 或 frame 访问另一个 window 或 frame 中声明的变量。例如，在文档里声明一个叫 phoneNumber 的变量，那么你就可以在子框架里使用 parent.phoneNumber 的方式来引用它。</p>
<p>注：window和frame都是以窗口界面的形式展现，前者占窗口的100%，而frame则是根据需要占据窗口的一部分。通常frame都会在window上打开，各frame之间进行组合或切换</p>
<h3 id="38常量">3.8常量</h3>
<p>你可以用关键字 const 创建一个只读的常量。常量标识符的命名规则和变量相同。</p>
<p>常量不可以改变值，也不可以在代码运行时重新声明。</p>
<p>常量的作用域规则与 let 块级作用域变量相同。若省略const关键字，则该标识符将被视为变量。</p>
<p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。例如：</p>
<pre><code>// 这会造成错误
function f() {};
const f = 5;

// 这也会造成错误
function f() {
  const g = 5;
  var g;

  //语句
}
</code></pre>
<p>然而，对象属性和数组被赋值为常量是不受保护的</p>
<pre><code>const MY_OBJECT = {&quot;key&quot;: &quot;value&quot;};
MY_OBJECT.key = &quot;otherValue&quot;;

const MY_ARRAY = ['HTML','CSS'];
MY_ARRAY.push('JAVASCRIPT');
console.log(MY_ARRAY); //logs ['HTML','CSS','JAVASCRIPT'];

//结果是可行的
</code></pre>
<h2 id="4数据结构和类型">4.数据结构和类型</h2>
<h3 id="41数据结构">4.1数据结构</h3>
<p>最新的ES标准定义了8种数据类型：<br>
①布尔值（Boolean），有 2 个值分别是：true 和 false.<br>
②null ， 一个表明 null 值的特殊关键字<br>
③undefined ，和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。<br>
④数字（Number），整数或浮点数，例如： 42 或者 3.14159。<br>
⑤任意精度的整数 (BigInt) ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。<br>
⑥字符串（String），字符串是一串表示文本值的字符序列，例如：&quot;Howdy&quot; 。<br>
⑦代表（Symbol）( 在 ECMAScript 6 中新添加的类型).。一种<font color="red">实例是唯一且不可改变的</font>数据类型。<br>
⑧对象（Object）</p>
<p>虽然这些数据类型相对来说比较少，但是通过他们你可以在程序中开发有用的功能。对象（Objects）和函数（functions）是这门语言的另外两个基本元素。你可以把对象当作存放值的一个命名容器，然后将函数当作你的程序能够执行的步骤。</p>
<h3 id="42数据类型的转换">4.2数据类型的转换</h3>
<p>JavaScript 是一种动态类型语言。这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。因此，你可以按照如下方式来定义变量：</p>
<pre><code>var answer = 42;
answer = &quot;Thanks for all the fish...&quot;;
//不会报错
</code></pre>
<h3 id="43数字转换为字符串">4.3数字转换为字符串</h3>
<p>在包含的数字和字符串的表达式中使用加法运算符，JS会把数字转换成字符串，例如：</p>
<pre><code>x = &quot;The answer is &quot; + 42 // &quot;The answer is 42&quot;
</code></pre>
<p>在涉及到其他运算符时，JS不会把数字转换为字符串，例如</p>
<pre><code>&quot;37&quot; - 7 // 30
&quot;37&quot; + 7 // &quot;377&quot;
</code></pre>
<h3 id="44字符串转换为数字">4.4字符串转换为数字</h3>
<p>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字。<br>
parseInt() (en-US)<br>
parseFloat()<br>
parseInt 方法只能返回整数，所以使用它会丢失小数部分。另外，调用 parseInt 时最好总是带上进制 (radix) 参数，这个参数用于指定使用哪一种进制。</p>
<p>还有一种方法是使用一元加法运算符</p>
<pre><code>&quot;1.1&quot; + &quot;1.1&quot; = &quot;1.11.1&quot;
(+&quot;1.1&quot;) + (+&quot;1.1&quot;) = 2.2
// 注意：加入括号为清楚起见，不是必需的。
</code></pre>
<h2 id="5字面量">5.字面量</h2>
<p>字面量是由语法表达式定义的常量（或，通过由一定字词组成的语词表达式定义的常量）<br>
在 JS 中，你可以使用各种字面量。这些字面量是脚本中按字面意思给出的固定的值，而不是变量。<br>
如：false，3.1415，thisIsStringOfHelloworld，invokedFunction: myFunction(&quot;myArgument&quot;)</p>
<h3 id="51数组字面量">5.1数组字面量</h3>
<p>数组字面值是一个封闭在方括号对 ([]) 中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为其元素进行初始化，而其长度被设定为元素的个数。</p>
<p>下面的示例用 3 个元素生成数组<code>coffees</code>，它的长度是 3。</p>
<pre><code>var coffees = [&quot;French Roast&quot;, &quot;Colombian&quot;, &quot;Kona&quot;];

var a=[3];

console.log(a.length); // 1

console.log(a[0]); // 3
</code></pre>
<p>若在顶层（全局）脚本里用字面值创建数组，JS语言将会在每次对包含该数组字面值的表达式求值时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时都会被创建一次。<br>
注：数组字面值同时也是数组对象</p>
<h4 id="数组字面值中的多余逗号">数组字面值中的多余逗号</h4>
<p>声明时，不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没有被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：</p>
<pre><code>var fish = [&quot;Lion&quot;, , &quot;Angel&quot;];
</code></pre>
<p>在这个数组中，有两个已被赋值的元素和一个空元素。如果你在元素列表的尾部添加了一个逗号，它将会被忽略<br>
再看一个例子。在这里，该数组的长度是 4，元素myList[1]和myList[3]被漏掉了。但是只有最后的那个逗号被忽略。</p>
<pre><code>var myList = ['home', , 'school', , ];
</code></pre>
<p>理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JS是十分重要的。但是，在你自己写代码时：显式地将缺失的元素声明为undefined，将大大提高你的代码的清晰度和可维护性。</p>
<h3 id="52布尔字面量即逻辑字面量">5.2布尔字面量（即：逻辑字面量）</h3>
<p>布尔类型有两种字面量：<code>true</code>和<code>false</code></p>
<p>不要混淆作为布尔对象的真和假与布尔类型的原始值 true 和 false。布尔对象是原始布尔数据类型的一个包装器</p>
<h3 id="53数字字面量">5.3数字字面量</h3>
<p>JS数字字面量包括多种基数的整数字面量和以 10 为基数的浮点数字面量</p>
<p>值得一提的是，语言标准要求数字字面量必须是无符号的。但是像-123.4这样的代码片段还是没有问题的，会被解释为一元操作符-应用于数字字面量123.4</p>
<h4 id="整数字面量">整数字面量</h4>
<p>整数可以用十进制（基数为 10）、十六进制（基数为 16）、八进制（基数为 8）以及二进制（基数为 2）表示。<br>
①十进制整数字面量由一串数字序列组成，且没有前缀 0。<br>
②八进制的整数以 0（或 0O、0o）开头，只能包括数字 0-7。<br>
③十六进制整数以 0x（或 0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。<br>
④二进制整数以 0b（或 0B）开头，只能包含数字 0 和 1。<br>
严格模式下，八进制整数字面量必须以 0o 或 0O 开头，而不能以 0 开头。<br>
例如：</p>
<pre><code>0, 117 and -345 (十进制，基数为 10)
015, 0001 and -0o77 (八进制，基数为 8)
0x1123, 0x00111 and -0xF1A7 (十六进制，基数为 16 或&quot;hex&quot;)
0b11, 0b0011 and -0b11 (二进制，基数为 2)
</code></pre>
<h4 id="浮点数字面量">浮点数字面量</h4>
<p>浮点数字面值可以有以下的组成部分：<br>
①一个十进制整数，可以带正负号（即前缀“+”或“ - ”），<br>
②小数点（“.”），<br>
③小数部分（由一串十进制数表示），<br>
④指数部分。<br>
指数部分以“e”或“E”开头，后面跟着一个整数，可以有正负号（即前缀“+”或“-”）。浮点数字面量至少有一位数字，而且必须带小数点或者“e”（大写“E”也可）。<br>
例如：</p>
<pre><code>3.14
-.2345789 // -0.23456789
-3.12e+12  // -3.12*10^12
.1e-23    // 0.1*10^(-23)=10^(-24)=1e-24
</code></pre>
<h3 id="54对象字面量">5.4对象字面量</h3>
<p>对象字面值是封闭在花括号对 ({}) 中的一个对象的零个或多个&quot;属性名 - 值&quot;对的（元素）列表。<br>
注：你不能在一条语句的开头就使用对象字面值，这将导致错误或产生超出预料的行为， 因为此时左花括号（{）会被认为是一个语句块的起始符号。</p>
<p>以下是一个对象字面值的例子。对象car的第一个元素定义了属性myCar；第二个元素，属性getCar，引用了一个函数调用（即 CarTypes(&quot;Honda&quot;)）；第三个元素，属性special，使用了一个已有的变量（即 Sales）。</p>
<pre><code>var Sales = &quot;Toyota&quot;;

function CarTypes(name) {
  return (name === &quot;Honda&quot;) ?
    name :
    &quot;Sorry, we don't sell &quot; + name + &quot;.&quot; ;
}

var car = { myCar: &quot;Saturn&quot;, getCar: CarTypes(&quot;Honda&quot;), special: Sales };

console.log(car.myCar);   // Saturn
console.log(car.getCar);  // Honda
console.log(car.special); // Toyota
</code></pre>
<p>更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项。</p>
<pre><code>var car = { manyCars: {a: &quot;Saab&quot;, &quot;b&quot;: &quot;Jeep&quot;}, 7: &quot;Mazda&quot; };

console.log(car.manyCars.b); // Jeep
console.log(car[7]); // Mazda
</code></pre>
<p>对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的 javascript 标识符，它必须用&quot;&quot;包裹。属性的名字不合法，那么便不能用。访问属性值，而是通过类数组标记 (&quot;[]&quot;) 访问和赋值。</p>
<pre><code>var unusualPropertyNames = {
  &quot;&quot;: &quot;An empty string&quot;,
  &quot;!&quot;: &quot;Bang!&quot;
}
console.log(unusualPropertyNames.&quot;&quot;);   // 语法错误: Unexpected string
console.log(unusualPropertyNames[&quot;&quot;]);  // An empty string
console.log(unusualPropertyNames.!);    // 语法错误: Unexpected token !
console.log(unusualPropertyNames[&quot;!&quot;]); // Bang!
</code></pre>
<h4 id="增强的对象字面量">增强的对象字面量</h4>
<p>在 ES2015，对象字面值扩展支持在创建时设置原型，简写了 foo: foo 形式的属性赋值，方法定义，支持父方法调用，以及使用表达式动态计算属性名。总之，这些也使对象字面值和类声明更加紧密地联系起来，让基于对象的设计从这些便利中更加受益。</p>
<pre><code>var obj = {
    // __proto__
    __proto__: theProtoObj,
    // Shorthand for ‘handler: handler’
    handler,
    // Methods
    toString() {
     // Super calls
     return &quot;d &quot; + super.toString();
    },
    // Computed (dynamic) property names
    [ 'prop_' + (() =&gt; 42)() ]: 42
};
</code></pre>
<p>请注意：</p>
<pre><code>var foo = {a: &quot;alpha&quot;, 2: &quot;two&quot;};
console.log(foo.a);    // alpha
console.log(foo[2]);   // two
//console.log(foo.2);  // SyntaxError: missing ) after argument list
//console.log(foo[a]); // ReferenceError: a is not defined
console.log(foo[&quot;a&quot;]); // alpha
console.log(foo[&quot;2&quot;]); // two
</code></pre>
<h3 id="55regexp字面值">5.5RegExp字面值</h3>
<p>一个正则表达式是字符被斜线（/）围成的表达式。<br>
下面是一个正则表达式文字的一个例子:</p>
<pre><code>var re = /ab+c/;
</code></pre>
<h3 id="56字符串字面量">5.6字符串字面量</h3>
<p>字符串字面量是由双引号（&quot;）对或单引号（'）括起来的零个或多个字符。字符串被限定在同种引号之间；也就是说，必须是成对单引号或成对双引号。下面的例子都是字符串字面值：</p>
<pre><code>&quot;foo&quot;
'bar'
&quot;one line \n another line&quot;
</code></pre>
<p>你可以在字符串字面值上使用字符串对象的所有方法——JS 会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串对象。你也能用对字符串字面值使用类似 String.length 的属性：</p>
<pre><code>console.log(&quot;John's cat&quot;.length)
// 将打印字符串中的字符个数（包括空格）
// 结果为：10
</code></pre>
<p>在 ES2015 中，还提供了一种模板字面量，模板字符串提供了一些语法糖来帮你构造字符串。除此之外，你可以在通过模板字符串前添加一个 tag 来自定义模板字符串的解析过程，这可以用来防止注入攻击，或者用来建立基于字符串的高级数据抽象。</p>
<pre><code>// Basic literal string creation
`In JavaScript '\n' is a line-feed.`

// Multiline strings
`In JavaScript this is
 not legal.`

// String interpolation
var name = &quot;Bob&quot;, time = &quot;today&quot;;
`Hello ${name}, how are you ${time}?`

// Construct an HTTP request prefix is used to interpret the replacements and construction
POST`http://foo.org/bar?a=${a}&amp;b=${b}
     Content-Type: application/json
     X-Credentials: ${credentials}
     { &quot;foo&quot;: ${foo},
       &quot;bar&quot;: ${bar}}`(myOnReadyStateChangeHandler);
</code></pre>
<h4 id="在字符串中使用的特殊字符">在字符串中使用的特殊字符</h4>
<p>作为一般字符的扩展，你可以在字符串中使用特殊字符，如下例所示:</p>
<pre><code>&quot;one line \n another line&quot;
</code></pre>
<h4 id="转义字符">转义字符</h4>
<p>通过在引号前加上反斜线''，可以在字符串中插入引号，这就是引号转义。例如：</p>
<pre><code>var quote = &quot;He read \&quot;The Cremation of Sam McGee\&quot; by R.W. Service.&quot;;
console.log(quote);
//He read &quot;The Cremation of Sam McGee&quot; by R.W. Service.
</code></pre>
<p>要在字符串中插入''字面值，必须转义反斜线。例如，要把文件路径 c:\temp 赋值给一个字符串，可以采用如下方式：</p>
<pre><code>var home = &quot;c:\\temp&quot;;
</code></pre>
<p>也可以在换行之前加上反斜线以转义换行（实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。</p>
<pre><code>var str = &quot;this string \
is broken \
across multiple\
lines.&quot;
console.log(str);   // this string is broken across multiplelines.
</code></pre>
<p>ECMAScript 2015 增加了一种新的字面量，叫做模板字面量 **template literals。**它包含一些新特征，包括了多行字符串！</p>
<pre><code>var poem =
`Roses are red,
Violets are blue.
Sugar is sweet,
and so is foo.`
</code></pre>
<h1 id="三-流程控制与错误处理">三、流程控制与错误处理</h1>
<p>JavaScript 提供一套灵活的语句集，特别是控制流语句，你可以用它在你的应用程序中实现大量的交互性功能（在 JavaScript 中，任何表达式  都可以看作一条语句）</p>
<h2 id="1语句块">1.语句块</h2>
<p>最基本的语句是用于组合语句的语句块。该块由一对大括号界定：</p>
<pre><code>{
   statement_1;
   statement_2;
   statement_3;
   .
   .
   .
   statement_n;
}
</code></pre>
<p>语句块通常用于流程控制，如if，for，while等等。</p>
<pre><code>while (x &lt; 10) {
  x++;
}
</code></pre>
<p>这里{ x++; }就是语句块。</p>
<p>注：在 ECMAScript 6 标准之前，Javascript 没有块作用域。在一个块中引入的变量的作用域是包含函数或脚本，并且设置它们的效果会延续到块之外。换句话说，块语句不定义范围。JavaScript 中的“独立”块会产生与 C 或 Java 中完全不同的结果。示例：</p>
<pre><code>var x = 1;
{
  var x = 2;
}
alert(x); // 输出的结果为 2
</code></pre>
<p>这段代码的输出是2，这是因为块级作用域中的 var x 变量声明与之前的声明在同一个作用域内。在 C 语言或是 Java 语言中，同样的代码输出的结果是 1。</p>
<p>从 ECMAScript 2015 开始，使用 let 和const变量是块作用域的。 更多信息请参考 let 和 const。</p>
<h2 id="2条件判断语句">2.条件判断语句</h2>
<p>条件判断语句指的是根据指定的条件所返回的结果（真或假或其它预定义的），来执行特定的语句。JavaScript 支持两种条件判断语句：if...else和switch。</p>
<h3 id="21ifelse-语句">2.1if...else 语句</h3>
<p>当一个逻辑条件为真，用 if 语句执行一个语句。当这个条件为假，使用可选择的 else 从句来执行这个语句。if 语句如下所示：</p>
<pre><code>if (condition) {
  statement_1;
}else {
  statement_2;
} //推荐使用严格的语句块模式，语句 else 可选
</code></pre>
<p>条件可以是任何返回结果被计算为 true 或 false 的表达式。如果条件表达式返回的是 true，statement_1 语句会被执行；否则，statement_2 被执行。statement_1 和 statement_2 可以是任何语句，甚至你可以将另一个 if 语句嵌套其中。</p>
<p>你也可以组合语句通过使用 else if 来测试连续多种条件判断，就像下面一样：</p>
<pre><code>if (condition_1) {
  statement_1;
}else if (condition_2) {
  statement_2;
}else if (condition_n_1) {
  statement_n;
}else {
  statement_last;
}
</code></pre>
<p>要执行多个语句，可以使用语句块 ({ ... }) 来分组这些语句。通常，总是使用语句块是一个好的习惯，特别是在代码涉及比较多的 if 语句时：</p>
<pre><code>if (条件) {
  当条件为真的时候，执行语句 1;
  当条件为真的时候，执行语句 2;
} else {
  当条件为假的时候，执行语句 3;
  当条件为假的时候，执行语句 4;
}
</code></pre>
<p>不建议在条件表达式中使用赋值语句，因为在快速查阅代码时容易把它看成等值比较。例如，不要使用下面的代码：</p>
<pre><code>  if(x = y){
    /*  语句  */
  }
</code></pre>
<p>如果你需要在条件表达式中使用赋值，通常在赋值语句前后额外添加一对括号。例如：</p>
<pre><code>if ((x = y)) {
  /* statements here */
}
</code></pre>
<p>错误的值<br>
下面这些值将被计算出 false:<br>
false<br>
undefined<br>
null<br>
0<br>
NaN<br>
空字符串（&quot;&quot;）<br>
当传递给条件语句所有其他的值，包括所有对象会被计算为真 。</p>
<p>请不要混淆原始的布尔值true和false 与 Boolean对象的真和假。例如：</p>
<pre><code>var b = new Boolean(false);
if (b) //结果视为真
if (b == true) // 结果视为假
</code></pre>
<p>在以下示例中，如果Text对象中的字符数为 3，函数checkData将返回true；否则，显示警报并返回false。</p>
<pre><code>function checkData() {
  if (document.form1.threeChar.value.length == 3) {
    return true;
  } else {
    alert(&quot;Enter exactly three characters. &quot; +
      document.form1.threeChar.value + &quot; is not valid.&quot;);
    return false;
  }
}
</code></pre>
<h3 id="22switch-语句">2.2switch 语句</h3>
<p>switch 语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个 case 标签。如果匹配成功，这个程序执行相关的语句。switch 语句如下所示：</p>
<pre><code>switch (expression) {
   case label_1:
      statements_1
      [break;]
   case label_2:
      statements_2
      [break;]
   ...
   default:
      statements_def
      [break;]
}
</code></pre>
<p>程序首先查找一个与 expression 匹配的 case 语句，然后将控制权转移到该子句，执行相关的语句。如果没有匹配值， 程序会去找 default 语句，如果找到了，控制权转移到该子句，执行相关的语句。如果没有找到 default，程序会继续执行 switch 语句后面的语句。default 语句通常出现在 switch 语句里的最后面，当然这不是必须的。</p>
<p>可选的 break 语句与每个 case 语句相关联， 保证在匹配的语句被执行后程序可以跳出 switch 并且继续执行 switch 后面的语句。如果 break 被忽略，则程序将继续执行 switch 语句中的下一条语句。</p>
<p>示例 在如下示例中，如果 fruittype 等于 &quot;Bananas&quot;, 程序匹配到对应 &quot;Bananas&quot; 的case 语句，并执行相关语句。 当执行到 break 时，程序结束了 switch 并执行 switch 后面的语句。 如果不写 break ，那么程序将会执行 case &quot;Cherries&quot; 下的语句。</p>
<pre><code>switch (fruittype) {
   case &quot;Oranges&quot;:
      document.write(&quot;Oranges are $0.59 a pound.&lt;br&gt;&quot;);
      break;
   case &quot;Apples&quot;:
      document.write(&quot;Apples are $0.32 a pound.&lt;br&gt;&quot;);
      break;
   case &quot;Bananas&quot;:
      document.write(&quot;Bananas are $0.48 a pound.&lt;br&gt;&quot;);
      break;
   case &quot;Cherries&quot;:
      document.write(&quot;Cherries are $3.00 a pound.&lt;br&gt;&quot;);
      break;
   case &quot;Mangoes&quot;:
   case &quot;Papayas&quot;:
      document.write(&quot;Mangoes and papayas are $2.79 a pound.&lt;br&gt;&quot;);
      break;
   default:
      document.write(&quot;Sorry, we are out of &quot; + fruittype + &quot;.&lt;br&gt;&quot;);
}
document.write(&quot;Is there anything else you'd like?&lt;br&gt;&quot;);
</code></pre>
<h2 id="3异常处理语句">3.异常处理语句</h2>
<p>你可以用 throw 语句抛出一个异常并且用 try...catch 语句捕获处理它。</p>
<h3 id="31异常类型">3.1异常类型</h3>
<p>JavaScript 可以抛出任意对象。然而，不是所有对象能产生相同的结果。尽管抛出数值或者字母串作为错误信息十分常见，但是通常用下列其中一种异常类型来创建目标更为高效：</p>
<p>ECMAScript exceptions<br>
DOMException and DOMError</p>
<h3 id="32throw-语句">3.2throw 语句</h3>
<p>使用throw语句抛出一个异常。当你抛出异常，你规定一个含有值的表达式要被抛出。</p>
<pre><code>throw expression;
</code></pre>
<p>你可以抛出任意表达式而不是特定一种类型的表达式。下面的代码抛出了几个不同类型的表达式：</p>
<pre><code>throw &quot;Error2&quot;;   // String type
throw 42;         // Number type
throw true;       // Boolean type
throw {toString: function() { return &quot;I'm an object!&quot;; } };
</code></pre>
<p>备注： 你可以在抛出异常时声明一个对象。那你就可以在 catch 块中查询到对象的属性。</p>
<pre><code>// Create an object type UserException
function UserException (message){
  this.message=message;
  this.name=&quot;UserException&quot;;
}

// Make the exception convert to a pretty string when used as
// a string (e.g. by the error console)
UserException.prototype.toString = function (){
  return this.name + ': &quot;' + this.message + '&quot;';
}

// Create an instance of the object type and throw it
throw new UserException(&quot;Value too high&quot;);
</code></pre>
<h3 id="33trycatch-语句">3.3try...catch 语句</h3>
<p>try...catch 语句标记一块待尝试的语句，并规定一个以上的响应应该有一个异常被抛出。如果我们抛出一个异常，try...catch语句就捕获它。</p>
<p>try...catch 语句有一个包含一条或者多条语句的 try 代码块，0 个或 1 个的catch代码块，catch 代码块中的语句会在 try 代码块中抛出异常时执行。 换句话说，如果你在 try 代码块中的代码如果没有执行成功，那么你希望将执行流程转入 catch 代码块。如果 try 代码块中的语句（或者try 代码块中调用的方法）一旦抛出了异常，那么执行流程会立即进入catch 代码块。如果 try 代码块没有抛出异常，catch 代码块就会被跳过。finally 代码块总会紧跟在 try 和 catch 代码块之后执行，但会在 try 和 catch 代码块之后的其他代码之前执行。</p>
<p>下面的例子使用了try...catch语句。示例调用了一个函数用于从一个数组中根据传递值来获取一个月份名称。如果该值与月份数值不相符，会抛出一个带有&quot;InvalidMonthNo&quot;值的异常，然后在捕捉块语句中设monthName变量为unknown。</p>
<pre><code>function getMonthName(mo) {
  mo = mo - 1; // Adjust month number for array index (1 = Jan, 12 = Dec)
  var months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,
                &quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;];
  if (months[mo]) {
    return months[mo];
  } else {
    throw &quot;InvalidMonthNo&quot;; //throw keyword is used here
  }
}

try { // statements to try
  monthName = getMonthName(myMonth); // function could throw exception
}
catch (e) {
  monthName = &quot;unknown&quot;;
  logMyErrors(e); // pass exception object to error handler -&gt; your own function
}
</code></pre>
<h4 id="catch-块">catch 块</h4>
<p>你可以使用catch块来处理所有可能在try块中产生的异常。</p>
<pre><code>catch (catchID) {
  statements
}
</code></pre>
<p>捕捉块指定了一个标识符（上述语句中的catchID）来存放抛出语句指定的值；你可以用这个标识符来获取抛出的异常信息。在插入throw块时 JavaScript 创建这个标识符；标识符只存在于catch块的存续期间里；当catch块执行完成时，标识符不再可用。</p>
<p>举个例子，下面代码抛出了一个异常。当异常出现时跳到catch块。</p>
<pre><code>try {
   throw &quot;myException&quot; // generates an exception
}
catch (e) {
// statements to handle any exceptions
   logMyErrors(e) // pass exception object to error handler
}
</code></pre>
<h4 id="finally块">finally块</h4>
<p>finally块包含了在 try 和 catch 块完成后、下面接着 try...catch 的语句之前执行的语句。finally块无论是否抛出异常都会执行。如果抛出了一个异常，就算没有异常处理，finally块里的语句也会执行。</p>
<p>你可以用finally块来令你的脚本在异常发生时优雅地退出；举个例子，你可能需要在绑定的脚本中释放资源。接下来的例子用文件处理语句打开了一个文件（服务端的 JavaScript 允许你进入文件）。如果在文件打开时一个异常抛出，finally块会在脚本错误之前关闭文件。</p>
<pre><code>openMyFile();
try {
    writeMyFile(theData); //This may throw a error
}catch(e){
    handleError(e); // If we got a error we handle it
}finally {
    closeMyFile(); // always close the resource
}
</code></pre>
<p>如果finally块返回一个值，该值会是整个try-catch-finally流程的返回值，不管在try和catch块中语句返回了什么：</p>
<pre><code>function f() {
  try {
    console.log(0);
    throw &quot;bogus&quot;;
  } catch(e) {
    console.log(1);
    return true; // this return statement is suspended
                 // until finally block has completed
    console.log(2); // not reachable
  } finally {
    console.log(3);
    return false; // overwrites the previous &quot;return&quot;
    console.log(4); // not reachable
  }
  // &quot;return false&quot; is executed now
  console.log(5); // not reachable
}
f(); // console 0, 1, 3; returns false
</code></pre>
<p>用finally块覆盖返回值也适用于在catch块内抛出或重新抛出的异常：</p>
<pre><code>function f() {
  try {
    throw 'bogus';
  } catch(e) {
    console.log('caught inner &quot;bogus&quot;');
    throw e; // this throw statement is suspended until
             // finally block has completed
  } finally {
    return false; // overwrites the previous &quot;throw&quot;
  }
  // &quot;return false&quot; is executed now
}

try {
  f();
} catch(e) {
  // this is never reached because the throw inside
  // the catch is overwritten
  // by the return in finally
  console.log('caught outer &quot;bogus&quot;');
}

// OUTPUT
// caught inner &quot;bogus&quot;
</code></pre>
<h4 id="嵌套-trycatch-语句">嵌套 try...catch 语句</h4>
<p>你可以嵌套一个或多个try ... catch语句。如果一个内部try ... catch语句没有catch块，它需要有一个finally块，并且封闭的try ... catch语句的catch块被检查匹配。有关更多信息，请参阅try... catch参考页上的嵌套 try-blocks。</p>
<h3 id="34使用error对象">3.4使用Error对象</h3>
<p>根据错误类型，你也许可以用'name'和'message'获取更精炼的信息。'name'提供了常规的错误类（如 'DOMException' 或 'Error'），而'message'通常提供了一条从错误对象转换成字符串的简明信息。</p>
<p>在抛出你个人所为的异常时，为了充分利用那些属性（比如你的catch块不能分辨是你个人所为的异常还是系统的异常时），你可以使用 Error 构造函数。比如：</p>
<pre><code>function doSomethingErrorProne () {
  if (ourCodeMakesAMistake()) {
    throw (new Error('The message'));
  } else {
    doSomethingToGetAJavascriptError();
  }
}
....
try {
  doSomethingErrorProne();
}
catch (e) {
  console.log(e.name); // logs 'Error'
  console.log(e.message); // logs 'The message' or a JavaScript error message)
}
</code></pre>
<h1 id="四-循环与迭代">四、循环与迭代</h1>
<p>循环提供了一种快速和简单的方式去做一些重复的事</p>
<h2 id="1for-语句">1.for 语句</h2>
<h2 id="2dowhile-语句">2.do...while 语句</h2>
<h2 id="3while-语句">3.while 语句</h2>
<h2 id="4label-语句">4.label 语句</h2>
<p>一个 label 提供了一个让你在程序中其他位置引用它的标识符。例如，你可以用 label 标识一个循环， 然后使用 break 或者 continue 来指出程序是否该停止循环还是继续循环。</p>
<p>label 语句的语法看起来像这样：</p>
<pre><code>label :
   statement
</code></pre>
<p>label 的值可以是任何的非保留字的 JavaScript 标识符， statement 可以是任意你想要标识的语句（块）。</p>
<p>在这个例子里，标记 markLoop 标识了一个 while 循环。</p>
<pre><code>markLoop:
while (theMark == true) {
   doSomething();
}
</code></pre>
<p>举一个比较典型的例子，看完后即明白 Label 的应用：</p>
<p>未添加 Label：</p>
<pre><code>var num = 0;
for (var i = 0 ; i &lt; 10 ; i++) {   // i 循环
  for (var j = 0 ; j &lt; 10 ; j++) { // j 循环
    if( i == 5 &amp;&amp; j == 5 ) {
       break; // i = 5，j = 5 时，会跳出 j 循环
    } // 但 i 循环会继续执行，等于跳出之后又继续执行更多次 j 循环
  num++;
  }
}

alert(num); // 输出 95
</code></pre>
<p>添加 Label 后：</p>
<pre><code>var num = 0;
outPoint:
for (var i = 0 ; i &lt; 10 ; i++){
  for (var j = 0 ; j &lt; 10 ; j++){
    if( i == 5 &amp;&amp; j == 5 ){
      break outPoint; // 在 i = 5，j = 5 时，跳出所有循环，
                      // 返回到整个 outPoint 下方，继续执行
    }
    num++;
  }
}

alert(num); // 输出 55
</code></pre>
<p>使用 continue 语句，则可达到与未添加 label 相同的效果，但在这种有多层循环的情况下，循环的跳出进入流程<font color="red">更为明晰一些</font>：</p>
<pre><code>var num = 0;
outPoint:
for(var i = 0; i &lt; 10; i++) {
  for(var j = 0; j &lt; 10; j++) {
    if(i == 5 &amp;&amp; j == 5) {
      continue outPoint;
    }
    num++;
  }
}
alert(num);  // 95
</code></pre>
<p>从 alert(num) 的值可以看出，continue outPoint; 语句的作用是跳出当前循环，并跳转到 outPoint（标签）下的 for 循环继续执行。</p>
<h2 id="5break-语句">5.break 语句</h2>
<p>使用 break 语句来终止循环，switch， 或者是链接到 label 语句。</p>
<p>当你使用不带 label 的 break 时， 它会立即终止当前所在的 while，do-while，for，或者 switch 并把控制权交回这些结构后面的语句。<br>
当你使用带 label 的 break 时，它会终止指定的带标记（label）的语句。<br>
break 语句的语法看起来像这样：</p>
<pre><code>break [label];
</code></pre>
<p>在语法中，被 [] 包裹的内容是可省略的，也就是 label 可以省略。若省略，则终止当前所在的循环或 switch；若不省略，则终止指定的 label 语句。</p>
<p>例子 1<br>
下面的例子循环数组里的元素，直到找到一个等于 theValue 的值：</p>
<pre><code>for (i = 0; i &lt; a.length; i++) {
  if (a[i] == theValue) {
    break;
  }
}
</code></pre>
<p>例子 2: 终止一个 label</p>
<pre><code>var x = 0;
var z = 0
labelCancelLoops: while (true) {
  console.log(&quot;外部循环: &quot; + x);
  x += 1;
  z = 1;
  while (true) {
    console.log(&quot;内部循环: &quot; + z);
    z += 1;
    if (z === 10 &amp;&amp; x === 10) {
      break labelCancelLoops;
    } else if (z === 10) {
      break;
    }
  }
}
</code></pre>
<h2 id="6continue-语句">6.continue 语句</h2>
<p>continue 语句可以用来继续执行（跳过代码块的剩余部分并进入下一循环）一个 while、do-while、for，或者 label 语句。</p>
<p>当你使用不带 label 的 continue 时， 它终止当前 while，do-while，或者 for 语句到结尾的这次的循环并且继续执行下一次循环。<br>
当你使用带 label 的 continue 时， 它会应用被 label 标识的循环语句。</p>
<pre><code>var i = 0;
var j = 10;
checkiandj:
  while (i &lt; 4) {
    console.log(i);
    i += 1;
    checkj:
      while (j &gt; 4) {
        console.log(j);
        j -= 1;
        if ((j % 2) == 0) {
          continue checkj;
        }
        console.log(j + ' 是奇数。');
      }
      console.log('i = ' + i);
      console.log('j = ' + j);
  }
</code></pre>
<h2 id="7forin-语句">7.for...in 语句</h2>
<p>for...in 语句循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</p>
<pre><code>for (variable in object) {
  statements
}
</code></pre>
<p>下面的函数通过它的参数得到一个对象和这个对象的名字。然后循环这个对象的所有属性并且返回一个列出属性名和该属性值的字符串。</p>
<pre><code>function dump_props(obj, obj_name) {
  var result = &quot;&quot;;
  for (var i in obj) {
    result += obj_name + &quot;.&quot; + i + &quot; = &quot; + obj[i] + &quot;&lt;br&gt;&quot;;
  }
  result += &quot;&lt;hr&gt;&quot;;
  return result;
}
</code></pre>
<p>对于一个拥有 make 和 model 属性的 car 对象来说，执行结果 result 是：</p>
<pre><code>car.make = Ford
car.model = Mustang
</code></pre>
<h3 id="71数组">7.1数组</h3>
<p>虽然使用 for...in 来迭代数组 Array 元素听起来很诱人，但是它返回的东西除了数字索引外，还有可能是你自定义的属性名字。因此还是用带有数字索引的传统的 for 循环来迭代一个数组比较好，因为，如果你想改变数组对象，比如添加属性或者方法，for...in 语句迭代的是自定义的属性，而不是数组的元素。（下面的 for...of 语句，和 forEach()，也是理想的选择。）</p>
<h2 id="8forof-语句">8.for...of 语句</h2>
<p>for...of 语句在可迭代对象（包括Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。</p>
<pre><code>for (variable of object) {
  statement
}
</code></pre>
<p>下面的这个例子展示了 for...of 和 for...in 两种循环语句之间的区别。 for...in 循环遍历的结果是数组元素的下标，而 for...of 遍历的结果是元素的值：</p>
<pre><code>let arr = [3, 5, 7];
arr.foo = &quot;hello&quot;;

for (let i in arr) {
   console.log(i); // 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;
}

for (let i of arr) {
   console.log(i); // 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;
}
</code></pre>
<h1 id="五-函数">五、函数</h1>
<p>函数是 JavaScript 中的基本组件之一。<br>
一个 JavaScript 函数用function关键字定义，后面跟着函数名和圆括号。</p>
<h2 id="1定义函数">1.定义函数</h2>
<h3 id="11函数声明">1.1函数声明</h3>
<p>一个函数定义（也称为函数声明，或函数语句）由一系列的function关键字组成，依次为：<br>
①函数的名称。<br>
②函数参数列表，包围在括号中并由逗号分隔。<br>
③定义函数的 JavaScript 语句，用大括号{}括起来。<br>
例如，以下的代码定义了一个简单的square函数：</p>
<pre><code>function square(number) {
  return number * number;
}
</code></pre>
<p>原始参数（比如一个具体的数字）被作为值传递给函数；值被传递给函数，如果被调用函数改变了这个参数的值，这样的改变不会影响到全局或调用函数。(不考虑this)</p>
<p>如果你传递一个对象（即一个非原始值，例如Array或用户自定义的对象）作为参数，而函数改变了这个对象的属性，这样的改变对函数外部是可见的，如下面的例子所示：</p>
<pre><code>function myFunc(theObject) {
  theObject.make = &quot;Toyota&quot;;
}

var mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};
var x, y;

x = mycar.make;     // x 获取的值为 &quot;Honda&quot;

myFunc(mycar);
y = mycar.make;     // y 获取的值为 &quot;Toyota&quot;
                    // (make 属性被函数改变了)
</code></pre>
<h3 id="12函数表达式">1.2函数表达式</h3>
<p>虽然上面的函数声明在语法上是一个语句，但函数也可以由函数表达式创建。这样的函数可以是匿名的；它不必有一个名称。例如，函数square也可这样来定义：</p>
<pre><code>const square = function(number) { return number * number; };
var x = square(4); // x gets the value 16
</code></pre>
<p>然而，函数表达式也可以提供函数名，并且可以用于在函数内部代指其本身，或者在调试器堆栈跟踪中识别该函数：</p>
<pre><code>const factorial = function fac(n) {return n&lt;2 ? 1 : n*fac(n-1)};

console.log(factorial(3));
</code></pre>
<p>当将函数作为参数传递给另一个函数时，函数表达式很方便。下面的例子演示了一个叫map的函数如何被定义，而后使用一个表达式函数作为其第一个参数进行调用：</p>
<pre><code>function map(f,a) {
  let result = []; // 创建一个数组
  let i; // 声明一个值，用来循环
  for (i = 0; i != a.length; i++)
    result[i] = f(a[i]);
  return result;
}
</code></pre>
<p>除了上述的定义函数方法外，你也可以在运行时用 Function 构造器由一个字符串来创建一个函数 ，很像 eval() 函数。</p>
<p>当一个函数是一个对象的属性时，** 称之为方法 **。</p>
<h2 id="2调用函数">2.调用函数</h2>
<p>定义一个函数并不会自动的执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。调用函数才会以给定的参数真正执行这些动作。例如，一旦你定义了函数square，你可以如下这样调用它：</p>
<pre><code>square(5);
</code></pre>
<p>函数一定要处于调用它们的域中，但是函数的声明可以被提升 (出现在调用语句之后)，如下例：</p>
<pre><code>console.log(square(5));
/* ... */
function square(n) { return n*n }
</code></pre>
<p>函数域是指函数声明时的所在的地方，或者函数在顶层被声明时指整个程序。</p>
<p>注：函数提升仅适用于函数声明，而不适用于函数表达式。</p>
<p>函数的参数并不局限于字符串或数字。你也可以将整个对象传递给函数</p>
<p>函数可以被递归，就是说函数可以调用其本身。例如，下面这个函数就是用递归计算阶乘：</p>
<pre><code>function factorial(n){
  if ((n == 0) || (n == 1))
    return 1;
  else
    return (n * factorial(n - 1));
}
</code></pre>
<p>还有其它的方式来调用函数。常见的一些情形是某些地方需要动态调用函数，或者函数的实参数量是变化的，或者调用函数的上下文需要指定为在运行时确定的特定对象。显然，函数本身就是对象，因此这些对象也有方法。作为此中情形之一，apply()方法可以实现这些目的。</p>
<h2 id="3函数作用域">3.函数作用域</h2>
<p>在函数内定义的变量不能在函数之外的任何地方访问，因为变量仅仅在该函数的域的内部有定义。相对应的，一个函数可以访问定义在其范围内的任何变量和函数。换言之，定义在全局域中的函数可以访问所有定义在全局域中的变量。在另一个函数中定义的函数也可以访问在其父函数中定义的所有变量和父函数有权访问的任何其他变量。</p>
<h2 id="4作用域和函数堆栈">4.作用域和函数堆栈</h2>
<h3 id="41递归">4.1递归</h3>
<p>一个函数可以指向并调用自身。有三种方法可以达到这个目的：<br>
①函数名<br>
②arguments.callee<br>
③作用域下的一个指向该函数的变量名<br>
例如，思考一下如下的函数定义：</p>
<pre><code>var foo = function bar() {
   // statements go here
};
</code></pre>
<p>在这个函数体内，以下的语句是等价的：</p>
<pre><code>bar()
arguments.callee() （ES5 禁止在严格模式下使用此属性）
foo()
</code></pre>
<p>调用自身的函数我们称之为递归函数。在某种意义上说，递归近似于循环。两者都重复执行相同的代码，并且两者都需要一个终止条件（避免无限循环或者无限递归）</p>
<pre><code>function loop(x) {
  if (x &gt;= 10) // &quot;x &gt;= 10&quot; 是退出条件（等同于 &quot;!(x &lt; 10)&quot;）
    return;
  // 做些什么
  loop(x + 1); // 递归调用
}
loop(0);
</code></pre>
<p>不过，有些算法并不能简单的用迭代来实现。例如，获取树结构中所有的节点时，使用递归实现要容易得多：</p>
<pre><code>function walkTree(node) {
  if (node == null) //
    return;
  // do something with node
  for (var i = 0; i &lt; node.childNodes.length; i++) {
    walkTree(node.childNodes[i]);
  }
}
</code></pre>
<p>跟loop函数相比，这里每个递归调用都产生了更多的递归。</p>
<p>将递归算法转换为非递归算法是可能的，不过逻辑上通常会更加复杂，而且需要使用堆栈。事实上，递归函数就使用了堆栈：函数堆栈。</p>
<p>这种类似堆栈的行为可以在下例中看到：</p>
<pre><code>function foo(i) {
  if (i &lt; 0)
    return;
  console.log('begin:' + i);
  foo(i - 1);
  console.log('end:' + i);
}
foo(3);

// 输出：

// begin:3
// begin:2
// begin:1
// begin:0
// end:0
// end:1
// end:2
// end:3
</code></pre>
<h3 id="42嵌套函数和闭包">4.2嵌套函数和闭包</h3>
<p>你可以在一个函数里面嵌套另外一个函数。嵌套（内部）函数对其容器（外部）函数是私有的。它自身也形成了一个闭包。一个闭包是一个可以自己拥有独立的环境与变量的表达式（通常是函数）。</p>
<p>既然嵌套函数是一个闭包，就意味着一个嵌套函数可以”继承“容器函数的参数和变量。换句话说，内部函数包含外部函数的作用域。</p>
<p>可以总结如下：<br>
①内部函数只可以在外部函数中访问。<br>
②内部函数形成了一个闭包：它可以访问外部函数的参数和变量，但是外部函数却不能使用它的参数和变量。<br>
下面的例子展示了嵌套函数：</p>
<pre><code>function addSquares(a, b) {
  function square(x) {
    return x * x;
  }
  return square(a) + square(b);
}
a = addSquares(2, 3); // returns 13
b = addSquares(3, 4); // returns 25
c = addSquares(4, 5); // returns 41
</code></pre>
<p>由于内部函数形成了闭包，因此你可以调用外部函数并为外部函数和内部函数指定参数：</p>
<pre><code>function outside(x) {
  function inside(y) {
    return x + y;
  }
  return inside;
}
fn_inside = outside(3); // 可以这样想：给一个函数，使它的值加 3
result = fn_inside(5); // returns 8

result1 = outside(3)(5); // returns 8

console.log(fn_inside)// inside(y) {return x + y;}
</code></pre>
<h3 id="43保存变量">4.3保存变量</h3>
<p>注意到上例中 inside 被返回时 x 是怎么被保留下来的。一个闭包必须保存它可见作用域中所有参数和变量。因为每一次调用传入的参数都可能不同，每一次对外部函数的调用实际上重新创建了一遍这个闭包。只有当返回的 inside 没有再被引用时，内存才会被释放。</p>
<p>这与在其他对象中存储引用没什么不同，但是通常不太明显，因为<font color="red">并不能直接设置引用，也不能检查它们</font>。</p>
<h3 id="44多层嵌套函数">4.4多层嵌套函数</h3>
<p>函数可以被多层嵌套。例如，函数 A 可以包含函数 B，函数 B 可以再包含函数 C。B 和 C 都形成了闭包，所以 B 可以访问 A，C 可以访问 B 和 A。因此，闭包可以包含多个作用域；他们递归式的包含了所有包含它的函数作用域。这个称之为作用域链。（稍后会详细解释）</p>
<pre><code>function A(x) {
  function B(y) {
    function C(z) {
      console.log(x + y + z);
    }
    C(3);
  }
  B(2);
}
A(1); //6
</code></pre>
<h3 id="45命名冲突">4.5命名冲突</h3>
<p>当同一个闭包作用域下两个参数或者变量同名时，就会产生命名冲突。更近的作用域有更高的优先权，所以最近的优先级最高，最远的优先级最低。这就是作用域链。链的第一个元素就是最里面的作用域，最后一个元素便是最外层的作用域。</p>
<pre><code>function outside() {
  var x = 5;
  function inside(x) {
    return x * 2;
  }
  return inside;
}

outside()(10); // returns 20 instead of 10
</code></pre>
<p>命名冲突发生在return x上，inside的参数x和outside变量x发生了冲突。这里的作用链域是{inside, outside, 全局对象}。因此inside的x具有最高优先权，返回了 20（inside的x）而不是 10（outside的x）。</p>
<h2 id="5闭包">5.闭包</h2>
<p>闭包是 JavaScript 中最强大的特性之一。JavaScript 允许函数嵌套，并且内部函数可以访问定义在外部函数中的所有变量和函数，以及外部函数能访问的所有变量和函数。</p>
<p>但是，外部函数却不能够访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一定的安全性。</p>
<p>此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数的生存周期将比内部函数执行时间长。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。</p>
<pre><code>var pet = function(name) {          //外部函数定义了一个变量&quot;name&quot;
  var getName = function() {
    //内部函数可以访问 外部函数定义的&quot;name&quot;
    return name;
  }
  //返回这个内部函数，从而将其暴露在外部函数作用域
  return getName;
};
myPet = pet(&quot;Vivie&quot;);

myPet();                            // 返回结果 &quot;Vivie&quot;
</code></pre>
<p>实际上可能会比上面的代码复杂的多。在下面这种情形中，返回了一个包含可以操作外部函数的内部变量方法的对象。</p>
<pre><code>var createPet = function(name) {
  var sex;

  return {
    setName: function(newName) {
      name = newName;
    },

    getName: function() {
      return name;
    },

    getSex: function() {
      return sex;
    },

    setSex: function(newSex) {
      if(typeof newSex == &quot;string&quot;
        &amp;&amp; (newSex.toLowerCase() == &quot;male&quot; || newSex.toLowerCase() == &quot;female&quot;)) {
        sex = newSex;
      }
    }
  }
}

var pet = createPet(&quot;Vivie&quot;);
pet.getName();                  // Vivie

pet.setName(&quot;Oliver&quot;);
pet.setSex(&quot;male&quot;);
pet.getSex();                   // male
pet.getName();                  // Oliver
</code></pre>
<p>在上面的代码中，外部函数的name变量对内嵌函数来说是可取得的，而除了通过内嵌函数本身，没有其它任何方法可以取得内嵌的变量。内嵌函数的内嵌变量就像内嵌函数的保险柜。它们会为内嵌函数保留“稳定”——而又安全——的数据参与运行。而这些内嵌函数甚至不会被分配给一个变量，或者不必一定要有名字。</p>
<pre><code>var getCode = (function(){
  var secureCode = &quot;0]Eal(eh&amp;2&quot;;    // A code we do not want outsiders to be able to modify...

  return function () {
    return secureCode;
  };
})();

getCode();    // Returns the secret code
</code></pre>
<p>注：小心命名冲突！</p>
<h2 id="6使用arguments对象">6.使用arguments对象</h2>
<p>函数的实际参数会被保存在一个类似数组的 arguments 对象中。在函数内，你可以按如下方式找出传入的参数：</p>
<pre><code>arguments[i]
</code></pre>
<p>其中i是参数的数组索引，以 0 开始。所以第一个传来的参数会是arguments[0]。参数的数量由arguments.length表示。</p>
<p>使用 arguments 对象，你可以处理比声明的更多的参数来调用函数。这在你事先不知道会需要将多少参数传递给函数时十分有用。你可以用arguments.length来获得实际传递给函数的参数的数量，然后用arguments对象来取得每个参数。</p>
<p>例如，设想有一个用来连接字符串的函数。唯一事先确定的参数是在连接后的字符串中用来分隔各个连接部分的字符（译注：比如例子里的分号“；”）。该函数定义如下：</p>
<pre><code>function myConcat(separator) {
   var result = ''; // 把值初始化成一个字符串，这样就可以用来保存字符串了！！
   var i;
   // iterate through arguments
   for (i = 1; i &lt; arguments.length; i++) {
      result += arguments[i] + separator;
   }
   return result;
}
</code></pre>
<p>你可以给这个函数传递任意数量的参数，它会将各个参数连接成一个字符串“列表”：</p>
<pre><code>// returns &quot;red, orange, blue, &quot;
myConcat(&quot;, &quot;, &quot;red&quot;, &quot;orange&quot;, &quot;blue&quot;);

// returns &quot;elephant; giraffe; lion; cheetah; &quot;
myConcat(&quot;; &quot;, &quot;elephant&quot;, &quot;giraffe&quot;, &quot;lion&quot;, &quot;cheetah&quot;);

// returns &quot;sage. basil. oregano. pepper. parsley. &quot;
myConcat(&quot;. &quot;, &quot;sage&quot;, &quot;basil&quot;, &quot;oregano&quot;, &quot;pepper&quot;, &quot;parsley&quot;);
</code></pre>
<p>注： arguments 变量只是“类数组对象”，并不是一个数组。称其为类数组对象是说它有一个索引编号和length属性。尽管如此，它并不拥有全部的 Array 对象的操作方法。</p>
<h2 id="7函数参数">7.函数参数</h2>
<p>从 ES6 开始，有两个新的类型的参数：默认参数，剩余参数</p>
<h3 id="71默认参数">7.1默认参数</h3>
<p>在 JavaScript 中，函数参数的默认值是undefined。然而，在某些情况下设置不同的默认值是有用的。这时默认参数可以提供帮助。</p>
<p>在过去，用于设定默认参数的一般策略是在函数的主体中测试参数值是否为undefined，如果是则赋予这个参数一个默认值。如果在下面的例子中，调用函数时没有实参传递给b，那么它的值就是undefined，于是计算a*b得到、函数返回的是 NaN。但是，在下面的例子中，这个已经被第二行获取处理：</p>
<pre><code>function multiply(a, b) {
  b = (typeof b !== 'undefined') ?  b : 1;

  return a*b;
}

multiply(5); // 5
</code></pre>
<p>使用默认参数，在函数体的检查就不再需要了。现在，你可以在函数头简单地把 1 设定为b的默认值：</p>
<pre><code>function multiply(a, b = 1) {
  return a*b;
}

multiply(5); // 5
</code></pre>
<h3 id="72剩余参数">7.2剩余参数</h3>
<p>剩余参数语法允许将不确定数量的参数表示为数组。在下面的例子中，使用剩余参数收集从第二个到最后参数。然后，我们将这个数组的每一个数与第一个参数相乘。这个例子是使用了一个箭头函数，这将在下一节介绍。</p>
<pre><code>function multiply(multiplier, ...theArgs) {
  return theArgs.map(x =&gt; multiplier * x);
}

var arr = multiply(2, 1, 2, 3);
console.log(arr); // [2, 4, 6]
</code></pre>
<h2 id="8箭头函数">8.箭头函数</h2>
<p>箭头函数表达式（也称胖箭头函数）相比函数表达式具有较短的语法并以词法的方式绑定 this。箭头函数<font color="red">总是匿名的</font>。</p>
<p>有两个因素会影响引入箭头函数：更简洁的函数和 this。</p>
<h3 id="81更简洁的函数">8.1更简洁的函数</h3>
<p>在一些函数模式中，更简洁的函数很受欢迎。对比一下：</p>
<pre><code>var a = [
  &quot;Hydrogen&quot;,
  &quot;Helium&quot;,
  &quot;Lithium&quot;,
  &quot;Beryllium&quot;
];

var a2 = a.map(function(s){ return s.length });

console.log(a2); // logs [ 8, 6, 7, 9 ]

var a3 = a.map( s =&gt; s.length );

console.log(a3); // logs [ 8, 6, 7, 9 ]
</code></pre>
<h3 id="82this的词法">8.2this的词法</h3>
<p>在箭头函数出现之前，每一个新函数都重新定义了自己的 this 值（在构造函数中是一个新的对象；在严格模式下是未定义的；在作为“对象方法”调用的函数中指向这个对象；等等）。以面向对象的编程风格，这样着实有点恼人。</p>
<pre><code>function Person() {
  // 构造函数 Person() 将`this`定义为自身
  this.age = 0;

  setInterval(function growUp() {
    // 在非严格模式下，growUp() 函数将`this`定义为“全局对象”，
    // 这与 Person() 定义的`this`不同，
    // 所以下面的语句不会起到预期的效果。
    this.age++;
  }, 1000);
}

var p = new Person();
</code></pre>
<p>在 ECMAScript 3/5 里，通过把this的值赋值给一个变量可以修复这个问题。</p>
<pre><code>function Person() {
  var self = this; // 有的人习惯用`that`而不是`self`，
                   // 无论你选择哪一种方式，请保持前后代码的一致性
  self.age = 0;

  setInterval(function growUp() {
    // 以下语句可以实现预期的功能
    self.age++;
  }, 1000);
}
</code></pre>
<p>另外，创建一个约束函数可以使得 this值被正确传递给 growUp() 函数。</p>
<p>箭头函数捕捉闭包上下文的this值，所以下面的代码工作正常。</p>
<pre><code>function Person(){
  this.age = 0;

  setInterval(() =&gt; {
    this.age++; // 这里的`this`正确地指向 person 对象
  }, 1000);
}

var p = new Person();
</code></pre>
<h2 id="9预定义函数">9.预定义函数</h2>
<p>JavaScript 语言有好些个预定义的内建函数：</p>
<h3 id="91eval">9.1eval()</h3>
<p>**eval()**函数会将传入的字符串当做 JavaScript 代码进行执行。</p>
<pre><code>console.log(eval('2 + 2'));
// expected output: 4

console.log(eval(new String('2 + 2')));
// expected output: 2 + 2

console.log(eval('2 + 2') === eval('4'));
// expected output: true

console.log(eval('2 + 2') === eval(new String('2 + 2')));
// expected output: false
</code></pre>
<h3 id="92uneval">9.2uneval()</h3>
<p>**uneval()**方法返回输入对象的源代码的字符串表示。</p>
<h3 id="93isfinite">9.3isFinite()</h3>
<p>**isFinite()**函数判断传入的值是否是有限的数值。 如果需要的话，其参数首先被转换为一个数值。</p>
<pre><code>function div(x) {
  if (isFinite(1000 / x)) {
    return 'Number is NOT Infinity.';
  }
  return 'Number is Infinity!';
}

console.log(div(0));
// expected output: &quot;Number is Infinity!&quot;&quot;

console.log(div(1));
// expected output: &quot;Number is NOT Infinity.&quot;
</code></pre>
<h3 id="94isnan">9.4isNaN()</h3>
<p>**isNaN()**函数判断一个值是否是NaN。注意：isNaN函数内部的强制转换规则十分有趣； 另一个可供选择的是 ECMAScript 6 中定义Number.isNaN() , 或者使用 typeof来判断数值类型。</p>
<h3 id="95parsefloat">9.5parseFloat()</h3>
<p>parseFloat() 函数解析字符串参数，并返回一个浮点数。</p>
<pre><code>function circumference(r) {
  return parseFloat(r) * 2.0 * Math.PI;
}

console.log(circumference(4.567));
// expected output: 28.695307297889173

console.log(circumference('4.567abcdefgh'));
// expected output: 28.695307297889173

console.log(circumference('abcdefgh'));
// expected output: NaN
</code></pre>
<h3 id="96parseintstring-radix">9.6parseInt(string, radix)</h3>
<p>parseInt() 函数解析字符串参数，并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数(进制数)。如果超出这个范围，将返回 NaN。假如指定 0 或未指定，基数将会根据字符串的值进行推算。注意，推算的结果不会永远是默认值 10！</p>
<pre><code>function roughScale(x, base) {
  const parsed = parseInt(x, base);
  if (isNaN(parsed)) { return 0; }
  return parsed * 100;
}

console.log(roughScale(' 0xF', 16));
// expected output: 1500

console.log(roughScale('321', 2));
// expected output: 0
</code></pre>
<h3 id="97encodeuriuri">9.7encodeURI(URI)</h3>
<p>**encodeURI()**方法通过用以一个，两个，三个或四个转义序列表示字符的 UTF-8 编码替换统一资源标识符（URI）的某些字符来进行编码（标准化）。<br>
返回值：一个新字符串，表示提供的字符串编码为统一资源标识符 (URI)</p>
<h3 id="98encodeuricomponent">9.8encodeURIComponent()</h3>
<p>encodeURIComponent() 方法通过用以一个，两个，三个或四个转义序列表示字符的 UTF-8 编码替换统一资源标识符（URI）的每个字符来进行编码（每个字符对应四个转义序列，这四个序列组了两个”替代“字符）。<br>
注：和前者的区别——整体和局部</p>
<pre><code>// encodes characters such as ?,=,/,&amp;,:
console.log(`?x=${encodeURIComponent('test?')}`);
// expected output: &quot;?x=test%3F&quot;

console.log(`?x=${encodeURIComponent('шеллы')}`);
// expected output: &quot;?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B&quot;
</code></pre>
<h3 id="99decodeuri">9.9decodeURI()</h3>
<p>decodeURI() 函数对先前经过encodeURI函数或者其他类似方法编码过的字符串进行解码。</p>
<h3 id="910decodeuricomponent">9.10decodeURIComponent()</h3>
<p>**decodeURIComponent()**方法对先前经过encodeURIComponent函数或者其他类似方法编码过的字符串进行解码。</p>
<h3 id="911escape-已弃用">9.11escape() 已弃用</h3>
<p>已废弃的 escape() 方法计算生成一个新的字符串，其中的某些字符已被替换为十六进制转义序列。使用 encodeURI或者encodeURIComponent替代本方法。</p>
<h3 id="912unescape-已弃用">9.12unescape() 已弃用</h3>
<p>已废弃的 unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。上述的转义序列就像escape里介绍的一样。因为 unescape 已经废弃，建议使用decodeURI()或者decodeURIComponent 替代本方法。</p>
]]></content>
    </entry>
</feed>